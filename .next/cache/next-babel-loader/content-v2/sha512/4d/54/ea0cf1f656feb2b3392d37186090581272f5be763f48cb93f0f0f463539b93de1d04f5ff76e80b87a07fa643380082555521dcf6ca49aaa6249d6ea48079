{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\nimport form from \"../../../mongoose/models/form\";\ndbconnect();\n\nconst handlegraphshape = async (id, res) => {\n  const newdata = [];\n  const data = await form.find({\n    _id: id\n  }).exec();\n  const s = data[0].tools.forEach(obj => {\n    graph.find({\n      formId: id,\n      ques: obj.label\n    }).exec((err, result) => {\n      newdata.push({\n        label: obj.label,\n        options: result\n      });\n    });\n  });\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        res.json(await handlegraphshape(query.id));\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","form","handlegraphshape","id","res","newdata","data","find","_id","exec","s","tools","forEach","obj","formId","ques","label","err","result","push","options","req","method","query","json","error","console","log","status","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACAF,SAAS;;AAET,MAAMG,gBAAgB,GAAG,OAAOC,EAAP,EAAWC,GAAX,KAAmB;AAC3C,QAAMC,OAAO,GAAG,EAAhB;AAEA,QAAMC,IAAI,GAAG,MAAML,IAAI,CAACM,IAAL,CAAU;AAAEC,IAAAA,GAAG,EAAEL;AAAP,GAAV,EAAuBM,IAAvB,EAAnB;AAEA,QAAMC,CAAC,GAAGJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,KAAR,CAAcC,OAAd,CAAuBC,GAAD,IAAS;AACxCb,IAAAA,KAAK,CAACO,IAAN,CAAW;AAAEO,MAAAA,MAAM,EAAEX,EAAV;AAAcY,MAAAA,IAAI,EAAEF,GAAG,CAACG;AAAxB,KAAX,EAA4CP,IAA5C,CAAiD,CAACQ,GAAD,EAAMC,MAAN,KAAiB;AACjEb,MAAAA,OAAO,CAACc,IAAR,CAAa;AAAEH,QAAAA,KAAK,EAAEH,GAAG,CAACG,KAAb;AAAoBI,QAAAA,OAAO,EAAEF;AAA7B,OAAb;AACA,KAFD;AAGA,GAJS,CAAV;AAKA,SAAOb,OAAP;AACA,CAXD;;AAaA,gBAAe,OAAOgB,GAAP,EAAYjB,GAAZ,KAAoB;AAClC,QAAM;AAAEkB,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBF,GAA1B;;AACA,UAAQC,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACHlB,QAAAA,GAAG,CAACoB,IAAJ,CAAS,MAAMtB,gBAAgB,CAACqB,KAAK,CAACpB,EAAP,CAA/B;AACA,OAFD,CAEE,OAAOsB,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,KAAnB;AACArB,QAAAA,GAAG,CAACwB,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEK,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAXF;AAaA,CAfD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport form from \"../../../mongoose/models/form\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = async (id, res) => {\r\n\tconst newdata = [];\r\n\r\n\tconst data = await form.find({ _id: id }).exec();\r\n\r\n\tconst s = data[0].tools.forEach((obj) => {\r\n\t\tgraph.find({ formId: id, ques: obj.label }).exec((err, result) => {\r\n\t\t\tnewdata.push({ label: obj.label, options: result });\r\n\t\t});\r\n\t});\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tres.json(await handlegraphshape(query.id));\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}