{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handleoldansewers = async (newGraphdata, id) => {\n  newGraphdata.forEach(ob => {\n    if (typeof ob.value !== \"string\") {\n      ob.value.forEach(key => {\n        const findGraph = graph.find({\n          formId: id,\n          optionId: key\n        }).exec((err, result) => {\n          if (result !== \"undefined\") {\n            if (result[0] !== \"undefined\") {\n              const answe = graph.findOneAndUpdate({\n                _id: result[0]._id\n              }, {\n                $inc: {\n                  count: 1\n                }\n              }).exec((errrr, anss) => {\n                console.log(errrr);\n              });\n            }\n          }\n        });\n      });\n    } else {\n      if (ob !== \"undefined\") {\n        const findGrap = graph.find({\n          formId: id,\n          text: ob.value\n        }).exec((err, result) => {\n          if (result !== \"undefined\") {\n            if (result[0] !== \"undefined\") {\n              const answer = graph.findOneAndUpdate({\n                _id: result[0]._id\n              }, {\n                $inc: {\n                  count: 1\n                }\n              }).exec((errr, ans) => {\n                console.log(errr);\n              });\n            }\n          }\n        });\n      }\n    }\n  });\n};\n\nconst handleGraphdata = (data, formid) => {\n  let newgraphans = [];\n  const l = data.length;\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n\n    if (element.options) {\n      const kl = element.options.length;\n\n      for (let k = 0; k < kl; k++) {\n        const elementt = element.options[k];\n        graph.find({\n          formId: formid,\n          qusetionId: element.id,\n          optionId: elementt.key\n        }).exec((err, data) => {\n          if (data.length < 1) {\n            const newgraf = new graph({\n              _id: new mongoose.Types.ObjectId(),\n              formId: formid,\n              qusetionId: element.id,\n              ques: element.label,\n              optionId: elementt.key,\n              text: elementt.text,\n              count: 0\n            });\n            newgraf.save().then(data => {\n              console.log(data);\n            });\n          }\n        });\n      }\n    }\n  }\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const findGraph = await graph.findById(query.id);\n        res.json(findGraph);\n      } catch (error) {\n        res.status(400).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const foundgraph = await graph.find({\n          formId: query.id\n        }).exec();\n\n        if (!foundgraph) {\n          const foundform = await form.find({\n            formId: query.id\n          }).exec();\n          const handlegraph = await handleGraphdata(foundform[0].tools, query.id);\n\n          if (handlegraph) {\n            const handledAn = await handleoldansewers(req.body, query.id);\n            res.status(200).json(handledAn);\n          } else {}\n        } else {\n          const handledAns = await handleoldansewers(req.body, query.id);\n          res.json(handledAns);\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/submitform/[id].js"],"names":["dbconnect","graph","handleoldansewers","newGraphdata","id","forEach","ob","value","key","findGraph","find","formId","optionId","exec","err","result","answe","findOneAndUpdate","_id","$inc","count","errrr","anss","console","log","findGrap","text","answer","errr","ans","handleGraphdata","data","formid","newgraphans","l","length","i","element","options","kl","k","elementt","qusetionId","newgraf","mongoose","Types","ObjectId","ques","label","save","then","req","res","method","query","findById","json","error","status","end","foundgraph","foundform","form","handlegraph","tools","handledAn","body","handledAns","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\n\r\nimport graph from \"../../../mongoose/models/graph\";\r\n\r\ndbconnect();\r\n\r\nconst handleoldansewers = async (newGraphdata, id) => {\r\n\tnewGraphdata.forEach((ob) => {\r\n\t\tif (typeof ob.value !== \"string\") {\r\n\t\t\tob.value.forEach((key) => {\r\n\t\t\t\tconst findGraph = graph\r\n\t\t\t\t\t.find({ formId: id, optionId: key })\r\n\t\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\t\tif (result !== \"undefined\") {\r\n\t\t\t\t\t\t\tif (result[0] !== \"undefined\") {\r\n\t\t\t\t\t\t\t\tconst answe = graph\r\n\t\t\t\t\t\t\t\t\t.findOneAndUpdate(\r\n\t\t\t\t\t\t\t\t\t\t{ _id: result[0]._id },\r\n\t\t\t\t\t\t\t\t\t\t{ $inc: { count: 1 } }\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t.exec((errrr, anss) => {\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(errrr);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (ob !== \"undefined\") {\r\n\t\t\t\tconst findGrap = graph\r\n\t\t\t\t\t.find({ formId: id, text: ob.value })\r\n\t\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\t\tif (result !== \"undefined\") {\r\n\t\t\t\t\t\t\tif (result[0] !== \"undefined\") {\r\n\t\t\t\t\t\t\t\tconst answer = graph\r\n\t\t\t\t\t\t\t\t\t.findOneAndUpdate(\r\n\t\t\t\t\t\t\t\t\t\t{ _id: result[0]._id },\r\n\t\t\t\t\t\t\t\t\t\t{ $inc: { count: 1 } }\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t.exec((errr, ans) => {\r\n\t\t\t\t\t\t\t\t\t\tconsole.log(errr);\r\n\t\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\nconst handleGraphdata = (data, formid) => {\r\n\tlet newgraphans = [];\r\n\tconst l = data.length;\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tif (element.options) {\r\n\t\t\tconst kl = element.options.length;\r\n\t\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\t\tconst elementt = element.options[k];\r\n\r\n\t\t\t\tgraph\r\n\t\t\t\t\t.find({\r\n\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\tqusetionId: element.id,\r\n\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.exec((err, data) => {\r\n\t\t\t\t\t\tif (data.length < 1) {\r\n\t\t\t\t\t\t\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\t\t\tqusetionId: element.id,\r\n\t\t\t\t\t\t\t\tques: element.label,\r\n\t\t\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t\t\t\ttext: elementt.text,\r\n\t\t\t\t\t\t\t\tcount: 0,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst findGraph = await graph.findById(query.id);\r\n\t\t\t\tres.json(findGraph);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(400).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tconst foundgraph = await graph.find({ formId: query.id }).exec();\r\n\r\n\t\t\t\tif (!foundgraph) {\r\n\t\t\t\t\tconst foundform = await form.find({ formId: query.id }).exec();\r\n\t\t\t\t\tconst handlegraph = await handleGraphdata(\r\n\t\t\t\t\t\tfoundform[0].tools,\r\n\t\t\t\t\t\tquery.id\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (handlegraph) {\r\n\t\t\t\t\t\tconst handledAn = await handleoldansewers(req.body, query.id);\r\n\t\t\t\t\t\tres.status(200).json(handledAn);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tconst handledAns = await handleoldansewers(req.body, query.id);\r\n\t\t\t\t\tres.json(handledAns);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}