{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = (data, formid) => {\n  let newgraphans = [];\n  const l = data.length;\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n\n    if (element.options) {\n      const kl = element.options.length;\n\n      for (let k = 0; k < kl; k++) {\n        const elementt = element.options[k];\n        graph.find({\n          formId: formid,\n          qusetionId: element.id,\n          optionId: elementt.key\n        }).exec((err, data) => {\n          if (data.length < 1) {\n            const newgraf = new graph({\n              _id: new mongoose.Types.ObjectId(),\n              formId: formid,\n              qusetionId: element.id,\n              ques: element.label,\n              optionId: elementt.key,\n              text: elementt.text,\n              count: 0\n            });\n            newgraf.save().then(data => {\n              console.log(data);\n            });\n          } else {\n            if (data[0].text === \"Place holder option 1\" || data[0].text === \"Place holder option 2\" || data[0].text === \"Place holder option 3\" || data[0].text === \"Place holder option 4\") {\n              graph.findOneAndDelete({\n                _id: data[0]._id\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          if (data.tools) {\n            res.json([...data.tools]);\n          }\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          const handlegraph = await handleGraphdata(req.body.task_data, query.id);\n\n          if (handlegraph) {\n            const handledAn = await handleoldansewers(req.body, query.id);\n            res.status(200).json(handledAn);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findform/[id].js"],"names":["dbconnect","form","graph","mongoose","handleGraphdata","data","formid","newgraphans","l","length","i","element","options","kl","k","elementt","find","formId","qusetionId","id","optionId","key","exec","err","newgraf","_id","Types","ObjectId","ques","label","text","count","save","then","console","log","findOneAndDelete","req","res","method","query","findById","tools","json","error","status","end","body","task_data","updateOne","$set","handlegraph","handledAn","handleoldansewers","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport form from \"../../../mongoose/models/form\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport mongoose from \"mongoose\";\r\ndbconnect();\r\n\r\nconst handleGraphdata = (data, formid) => {\r\n\tlet newgraphans = [];\r\n\tconst l = data.length;\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tif (element.options) {\r\n\t\t\tconst kl = element.options.length;\r\n\t\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\t\tconst elementt = element.options[k];\r\n\r\n\t\t\t\tgraph\r\n\t\t\t\t\t.find({\r\n\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\tqusetionId: element.id,\r\n\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.exec((err, data) => {\r\n\t\t\t\t\t\tif (data.length < 1) {\r\n\t\t\t\t\t\t\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\t\t\tqusetionId: element.id,\r\n\t\t\t\t\t\t\t\tques: element.label,\r\n\t\t\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t\t\t\ttext: elementt.text,\r\n\t\t\t\t\t\t\t\tcount: 0,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\t\tconsole.log(data);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\t\tdata[0].text === \"Place holder option 1\" ||\r\n\t\t\t\t\t\t\t\tdata[0].text === \"Place holder option 2\" ||\r\n\t\t\t\t\t\t\t\tdata[0].text === \"Place holder option 3\" ||\r\n\t\t\t\t\t\t\t\tdata[0].text === \"Place holder option 4\"\r\n\t\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\t\tgraph.findOneAndDelete({ _id: data[0]._id });\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tawait form.findById(query.id).then((data) => {\r\n\t\t\t\t\tif (data.tools) {\r\n\t\t\t\t\t\tres.json([...data.tools]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(404).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tif (req.body.task_data.length !== 0) {\r\n\t\t\t\t\tform\r\n\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t{ _id: query.id },\r\n\t\t\t\t\t\t\t{ $set: { tools: [...req.body.task_data] } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec();\r\n\t\t\t\t\tconst handlegraph = await handleGraphdata(\r\n\t\t\t\t\t\treq.body.task_data,\r\n\t\t\t\t\t\tquery.id\r\n\t\t\t\t\t);\r\n\r\n\t\t\t\t\tif (handlegraph) {\r\n\t\t\t\t\t\tconst handledAn = await handleoldansewers(req.body, query.id);\r\n\t\t\t\t\t\tres.status(200).json(handledAn);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}