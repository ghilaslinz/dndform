{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = (data, formid) => {\n  const l = data.length;\n  let tools = [];\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n    const kl = element.options.length;\n    let option = [];\n\n    for (let k = 0; k < kl; k++) {\n      const elementt = element.options[k];\n      graph.find({\n        formId: formid,\n        questionId: element.name,\n        optionId: elementt.key\n      }).exec().then(data => {\n        if (!data.optionId) {\n          const newgraf = new graph({\n            _id: new mongoose.Types.ObjectId()\n          });\n          newgraf.save().then(data => {\n            console.log(\"created\");\n          });\n        }\n      });\n    }\n\n    tools.push({\n      name: element.field_name,\n      value: option\n    });\n  }\n\n  return tools;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          res.json([...data.tools]);\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          console.log(req.body.task_data);\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findform/[id].js"],"names":["dbconnect","form","graph","mongoose","handleGraphdata","data","formid","l","length","tools","i","element","kl","options","option","k","elementt","find","formId","questionId","name","optionId","key","exec","then","newgraf","_id","Types","ObjectId","save","console","log","push","field_name","value","req","res","method","query","findById","id","json","error","status","end","body","task_data","updateOne","$set","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,QAAP,MAAqB,UAArB;AACAH,SAAS;;AAET,MAAMI,eAAe,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACzC,QAAMC,CAAC,GAAGF,IAAI,CAACG,MAAf;AACA,MAAIC,KAAK,GAAG,EAAZ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuBG,CAAC,EAAxB,EAA4B;AAC3B,UAAMC,OAAO,GAAGN,IAAI,CAACK,CAAD,CAApB;AACA,UAAME,EAAE,GAAGD,OAAO,CAACE,OAAR,CAAgBL,MAA3B;AACA,QAAIM,MAAM,GAAG,EAAb;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,EAApB,EAAwBG,CAAC,EAAzB,EAA6B;AAC5B,YAAMC,QAAQ,GAAGL,OAAO,CAACE,OAAR,CAAgBE,CAAhB,CAAjB;AAEAb,MAAAA,KAAK,CACHe,IADF,CACO;AACLC,QAAAA,MAAM,EAAEZ,MADH;AAELa,QAAAA,UAAU,EAAER,OAAO,CAACS,IAFf;AAGLC,QAAAA,QAAQ,EAAEL,QAAQ,CAACM;AAHd,OADP,EAMEC,IANF,GAOEC,IAPF,CAOQnB,IAAD,IAAU;AACf,YAAI,CAACA,IAAI,CAACgB,QAAV,EAAoB;AACnB,gBAAMI,OAAO,GAAG,IAAIvB,KAAJ,CAAU;AACzBwB,YAAAA,GAAG,EAAE,IAAIvB,QAAQ,CAACwB,KAAT,CAAeC,QAAnB;AADoB,WAAV,CAAhB;AAGAH,UAAAA,OAAO,CAACI,IAAR,GAAeL,IAAf,CAAqBnB,IAAD,IAAU;AAC7ByB,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,WAFD;AAGA;AACD,OAhBF;AAiBA;;AACDtB,IAAAA,KAAK,CAACuB,IAAN,CAAW;AAAEZ,MAAAA,IAAI,EAAET,OAAO,CAACsB,UAAhB;AAA4BC,MAAAA,KAAK,EAAEpB;AAAnC,KAAX;AACA;;AAED,SAAOL,KAAP;AACA,CAjCD;;AAmCA,gBAAe,OAAO0B,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMpC,IAAI,CAACsC,QAAL,CAAcD,KAAK,CAACE,EAApB,EAAwBhB,IAAxB,CAA8BnB,IAAD,IAAU;AAC5C+B,UAAAA,GAAG,CAACK,IAAJ,CAAS,CAAC,GAAGpC,IAAI,CAACI,KAAT,CAAT;AACA,SAFK,CAAN;AAGA,OAJD,CAIE,OAAOiC,KAAP,EAAc;AACfN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,UAAAA;AAAF,SAArB;AACAN,QAAAA,GAAG,CAACQ,GAAJ;AACA;;AACD;;AACD,SAAK,MAAL;AACC,UAAI;AACH,YAAIT,GAAG,CAACU,IAAJ,CAASC,SAAT,CAAmBtC,MAAnB,KAA8B,CAAlC,EAAqC;AACpCP,UAAAA,IAAI,CACF8C,SADF,CAEE;AAAErB,YAAAA,GAAG,EAAEY,KAAK,CAACE;AAAb,WAFF,EAGE;AAAEQ,YAAAA,IAAI,EAAE;AAAEvC,cAAAA,KAAK,EAAE,CAAC,GAAG0B,GAAG,CAACU,IAAJ,CAASC,SAAb;AAAT;AAAR,WAHF,EAKEvB,IALF;AAMAO,UAAAA,OAAO,CAACC,GAAR,CAAYI,GAAG,CAACU,IAAJ,CAASC,SAArB;AACA;AACD,OAVD,CAUE,OAAOJ,KAAP,EAAc;AACfZ,QAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEQ,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AA7BF;AA+BA,CAjCD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport form from \"../../../mongoose/models/form\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport mongoose from \"mongoose\";\r\ndbconnect();\r\n\r\nconst handleGraphdata = (data, formid) => {\r\n\tconst l = data.length;\r\n\tlet tools = [];\r\n\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tconst kl = element.options.length;\r\n\t\tlet option = [];\r\n\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\tconst elementt = element.options[k];\r\n\r\n\t\t\tgraph\r\n\t\t\t\t.find({\r\n\t\t\t\t\tformId: formid,\r\n\t\t\t\t\tquestionId: element.name,\r\n\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t})\r\n\t\t\t\t.exec()\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tif (!data.optionId) {\r\n\t\t\t\t\t\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\tconsole.log(\"created\");\r\n\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t\ttools.push({ name: element.field_name, value: option });\r\n\t}\r\n\r\n\treturn tools;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tawait form.findById(query.id).then((data) => {\r\n\t\t\t\t\tres.json([...data.tools]);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(404).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tif (req.body.task_data.length !== 0) {\r\n\t\t\t\t\tform\r\n\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t{ _id: query.id },\r\n\t\t\t\t\t\t\t{ $set: { tools: [...req.body.task_data] } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec();\r\n\t\t\t\t\tconsole.log(req.body.task_data);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}