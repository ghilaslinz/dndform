{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  let ids = {};\n  let dups = [];\n  data.forEach(val => {\n    if (ids[val.questionId]) {\n      dups.push(val);\n    } else {\n      ids[val.id] = true;\n    }\n  });\n  return dups;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          console.log(handlegraphshape(data));\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","ids","dups","forEach","val","questionId","push","id","req","res","method","query","find","formId","console","log","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,MAAIC,GAAG,GAAG,EAAV;AACA,MAAIC,IAAI,GAAG,EAAX;AAEAF,EAAAA,IAAI,CAACG,OAAL,CAAcC,GAAD,IAAS;AACrB,QAAIH,GAAG,CAACG,GAAG,CAACC,UAAL,CAAP,EAAyB;AACxBH,MAAAA,IAAI,CAACI,IAAL,CAAUF,GAAV;AACA,KAFD,MAEO;AACNH,MAAAA,GAAG,CAACG,GAAG,CAACG,EAAL,CAAH,GAAc,IAAd;AACA;AACD,GAND;AAOA,SAAOL,IAAP;AACA,CAZD;;AAcA,gBAAe,OAAOM,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMV,IAAI,GAAG,MAAMF,KAAK,CAACc,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEF,KAAK,CAACJ;AAAhB,SAAX,CAAnB;;AACA,YAAIP,IAAJ,EAAU;AACTc,UAAAA,OAAO,CAACC,GAAR,CAAYhB,gBAAgB,CAACC,IAAD,CAA5B;AACA;AACD,OALD,CAKE,OAAOgB,KAAP,EAAc;AACfF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,KAAnB;AACAP,QAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tlet ids = {};\r\n\tlet dups = [];\r\n\r\n\tdata.forEach((val) => {\r\n\t\tif (ids[val.questionId]) {\r\n\t\t\tdups.push(val);\r\n\t\t} else {\r\n\t\t\tids[val.id] = true;\r\n\t\t}\r\n\t});\r\n\treturn dups;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tconsole.log(handlegraphshape(data));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}