{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  let newdata = [];\n  data.forEach((objec, i) => {\n    let samequestion = [];\n\n    if (samequestion.length > 0) {\n      samequestion.forEach(oo => {\n        if (oo.text !== objec.text && oo.questionid) {\n          samequestion.push(element);\n        }\n      });\n    } else {\n      samequestion.push(element);\n    }\n\n    if (newdata.length > 0) {\n      newdata.forEach(ob => {\n        if (ob.ques !== element.ques) {\n          newdata.push({\n            ques: element.ques,\n            options: samequestion\n          });\n        }\n      });\n    } else {\n      newdata.push({\n        ques: element.ques,\n        options: samequestion\n      });\n    }\n  });\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          console.log(handlegraphshape(data));\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","newdata","forEach","objec","i","samequestion","length","oo","text","questionid","push","element","ob","ques","options","req","res","method","query","find","formId","id","console","log","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,MAAIC,OAAO,GAAG,EAAd;AAEAD,EAAAA,IAAI,CAACE,OAAL,CAAa,CAACC,KAAD,EAAQC,CAAR,KAAc;AAC1B,QAAIC,YAAY,GAAG,EAAnB;;AAEA,QAAIA,YAAY,CAACC,MAAb,GAAsB,CAA1B,EAA6B;AAC5BD,MAAAA,YAAY,CAACH,OAAb,CAAsBK,EAAD,IAAQ;AAC5B,YAAIA,EAAE,CAACC,IAAH,KAAYL,KAAK,CAACK,IAAlB,IAA0BD,EAAE,CAACE,UAAjC,EAA6C;AAC5CJ,UAAAA,YAAY,CAACK,IAAb,CAAkBC,OAAlB;AACA;AACD,OAJD;AAKA,KAND,MAMO;AACNN,MAAAA,YAAY,CAACK,IAAb,CAAkBC,OAAlB;AACA;;AAED,QAAIV,OAAO,CAACK,MAAR,GAAiB,CAArB,EAAwB;AACvBL,MAAAA,OAAO,CAACC,OAAR,CAAiBU,EAAD,IAAQ;AACvB,YAAIA,EAAE,CAACC,IAAH,KAAYF,OAAO,CAACE,IAAxB,EAA8B;AAC7BZ,UAAAA,OAAO,CAACS,IAAR,CAAa;AAAEG,YAAAA,IAAI,EAAEF,OAAO,CAACE,IAAhB;AAAsBC,YAAAA,OAAO,EAAET;AAA/B,WAAb;AACA;AACD,OAJD;AAKA,KAND,MAMO;AACNJ,MAAAA,OAAO,CAACS,IAAR,CAAa;AAAEG,QAAAA,IAAI,EAAEF,OAAO,CAACE,IAAhB;AAAsBC,QAAAA,OAAO,EAAET;AAA/B,OAAb;AACA;AACD,GAtBD;AAuBA,SAAOJ,OAAP;AACA,CA3BD;;AA6BA,gBAAe,OAAOc,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMjB,IAAI,GAAG,MAAMF,KAAK,CAACqB,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEF,KAAK,CAACG;AAAhB,SAAX,CAAnB;;AACA,YAAIrB,IAAJ,EAAU;AACTsB,UAAAA,OAAO,CAACC,GAAR,CAAYxB,gBAAgB,CAACC,IAAD,CAA5B;AACA;AACD,OALD,CAKE,OAAOwB,KAAP,EAAc;AACfF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,KAAnB;AACAR,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tlet newdata = [];\r\n\r\n\tdata.forEach((objec, i) => {\r\n\t\tlet samequestion = [];\r\n\r\n\t\tif (samequestion.length > 0) {\r\n\t\t\tsamequestion.forEach((oo) => {\r\n\t\t\t\tif (oo.text !== objec.text && oo.questionid) {\r\n\t\t\t\t\tsamequestion.push(element);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsamequestion.push(element);\r\n\t\t}\r\n\r\n\t\tif (newdata.length > 0) {\r\n\t\t\tnewdata.forEach((ob) => {\r\n\t\t\t\tif (ob.ques !== element.ques) {\r\n\t\t\t\t\tnewdata.push({ ques: element.ques, options: samequestion });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tnewdata.push({ ques: element.ques, options: samequestion });\r\n\t\t}\r\n\t});\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tconsole.log(handlegraphshape(data));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}