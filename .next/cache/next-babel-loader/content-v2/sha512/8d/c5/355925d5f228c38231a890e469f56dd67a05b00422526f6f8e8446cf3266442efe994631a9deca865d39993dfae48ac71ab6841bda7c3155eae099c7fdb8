{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = (data, formid) => {\n  const l = data.length;\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n\n    if (element.options) {\n      const kl = element.options.length;\n\n      for (let k = 0; k < kl; k++) {\n        const elementt = element.options[k];\n        graph.find({\n          formId: formid,\n          qusetionId: element.name,\n          optionId: elementt.key\n        }).exec().then(data => {\n          console.log(\"data\", data);\n\n          if (!data.optionId) {\n            console.log(\"cretion\");\n            /*\tconst newgraf = new graph({\r\n            \t_id: new mongoose.Types.ObjectId(),\r\n            \tformId: formid,\r\n            \tqusetionId: element.field_name,\r\n            \tques: element.lebel,\r\n            \toptionId: elementt.key,\r\n            \ttext: elementt.text,\r\n            \tcount: 0,\r\n            });\r\n            newgraf.save().then((data) => {\r\n            \treturn true;\r\n            });*/\n          } else {\n            return false;\n          }\n        });\n      }\n    }\n  }\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          if (data.tools) {\n            res.json([...data.tools]);\n          }\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          const handlegraph = await handleGraphdata(req.body.task_data, query.id);\n\n          if (handlegraph) {\n            res.status(200).json({\n              sucees: true\n            });\n          } else {\n            res.status(404).json({\n              sucees: false\n            });\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findform/[id].js"],"names":["dbconnect","form","graph","mongoose","handleGraphdata","data","formid","l","length","i","element","options","kl","k","elementt","find","formId","qusetionId","name","optionId","key","exec","then","console","log","req","res","method","query","findById","id","tools","json","error","status","end","body","task_data","updateOne","_id","$set","handlegraph","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport form from \"../../../mongoose/models/form\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport mongoose from \"mongoose\";\r\ndbconnect();\r\n\r\nconst handleGraphdata = (data, formid) => {\r\n\tconst l = data.length;\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tif (element.options) {\r\n\t\t\tconst kl = element.options.length;\r\n\t\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\t\tconst elementt = element.options[k];\r\n\r\n\t\t\t\tgraph\r\n\t\t\t\t\t.find({\r\n\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\tqusetionId: element.name,\r\n\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.exec()\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tconsole.log(\"data\", data);\r\n\t\t\t\t\t\tif (!data.optionId) {\r\n\t\t\t\t\t\t\tconsole.log(\"cretion\");\r\n\t\t\t\t\t\t\t/*\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\t\t\tqusetionId: element.field_name,\r\n\t\t\t\t\t\t\t\tques: element.lebel,\r\n\t\t\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t\t\t\ttext: elementt.text,\r\n\t\t\t\t\t\t\t\tcount: 0,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t});*/\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tawait form.findById(query.id).then((data) => {\r\n\t\t\t\t\tif (data.tools) {\r\n\t\t\t\t\t\tres.json([...data.tools]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(404).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tif (req.body.task_data.length !== 0) {\r\n\t\t\t\t\tform\r\n\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t{ _id: query.id },\r\n\t\t\t\t\t\t\t{ $set: { tools: [...req.body.task_data] } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec();\r\n\t\t\t\t\tconst handlegraph = await handleGraphdata(\r\n\t\t\t\t\t\treq.body.task_data,\r\n\t\t\t\t\t\tquery.id\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (handlegraph) {\r\n\t\t\t\t\t\tres.status(200).json({ sucees: true });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}