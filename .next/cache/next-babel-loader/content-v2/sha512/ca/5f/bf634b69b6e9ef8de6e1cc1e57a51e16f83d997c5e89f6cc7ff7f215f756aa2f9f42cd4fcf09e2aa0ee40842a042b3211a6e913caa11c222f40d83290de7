{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handleoldansewers = (newGraphdata, {\n  tools\n}) => {\n  let optionss = [];\n  let tttt = newGraphdata.forEach((ob, index) => {\n    let option = [];\n    let k = ob.value.filter((kkey, jj) => {\n      console.log(kkey);\n      return obje.key === kkey;\n    });\n    let llll = tools[index].value.forEach((obje, j) => {\n      console.log(\"o\", k);\n\n      if (obje.key === k) {\n        option.push({\n          key: obje.key,\n          text: obje.text,\n          count: obje.count + 1\n        });\n      } else {\n        option.push({\n          key: obje.key,\n          text: obje.text,\n          count: obje.count\n        });\n      }\n    });\n    optionss.push({\n      name: ob.name,\n      value: option\n    });\n  });\n  return optionss;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const findGraph = await graph.findById(query.id);\n        res.json(findGraph);\n      } catch (error) {\n        res.status(400).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const findGraph = await graph.find({\n          formId: query.id\n        }).exec();\n        const handledAns = await handleoldansewers(req.body, ...findGraph);\n        /*graph\r\n        \t.updateOne({ formId: query.id }, { $set: { tools: [...handledAns] } })\r\n        \t.exec()\r\n        \t.then((data) => {\r\n        \t\tres.status(200).json(data);\r\n        \t});*/\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/submitform/[id].js"],"names":["dbconnect","graph","handleoldansewers","newGraphdata","tools","optionss","tttt","forEach","ob","index","option","k","value","filter","kkey","jj","console","log","obje","key","llll","j","push","text","count","name","req","res","method","query","findGraph","findById","id","json","error","status","end","find","formId","exec","handledAns","body","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\n\r\nimport graph from \"../../../mongoose/models/graph\";\r\n\r\ndbconnect();\r\n\r\nconst handleoldansewers = (newGraphdata, { tools }) => {\r\n\tlet optionss = [];\r\n\r\n\tlet tttt = newGraphdata.forEach((ob, index) => {\r\n\t\tlet option = [];\r\n\t\tlet k = ob.value.filter((kkey, jj) => {\r\n\t\t\tconsole.log(kkey);\r\n\t\t\treturn obje.key === kkey;\r\n\t\t});\r\n\t\tlet llll = tools[index].value.forEach((obje, j) => {\r\n\t\t\tconsole.log(\"o\", k);\r\n\t\t\tif (obje.key === k) {\r\n\t\t\t\toption.push({\r\n\t\t\t\t\tkey: obje.key,\r\n\t\t\t\t\ttext: obje.text,\r\n\t\t\t\t\tcount: obje.count + 1,\r\n\t\t\t\t});\r\n\t\t\t} else {\r\n\t\t\t\toption.push({\r\n\t\t\t\t\tkey: obje.key,\r\n\t\t\t\t\ttext: obje.text,\r\n\t\t\t\t\tcount: obje.count,\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\toptionss.push({ name: ob.name, value: option });\r\n\t});\r\n\r\n\treturn optionss;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst findGraph = await graph.findById(query.id);\r\n\t\t\t\tres.json(findGraph);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(400).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tconst findGraph = await graph.find({ formId: query.id }).exec();\r\n\r\n\t\t\t\tconst handledAns = await handleoldansewers(req.body, ...findGraph);\r\n\r\n\t\t\t\t/*graph\r\n\t\t\t\t\t.updateOne({ formId: query.id }, { $set: { tools: [...handledAns] } })\r\n\t\t\t\t\t.exec()\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tres.status(200).json(data);\r\n\t\t\t\t\t});*/\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}