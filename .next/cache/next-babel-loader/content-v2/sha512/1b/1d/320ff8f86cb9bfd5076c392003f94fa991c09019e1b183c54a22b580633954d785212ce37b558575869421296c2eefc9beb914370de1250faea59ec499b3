{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handleoldansewers = async (newGraphdata, id) => {\n  newGraphdata.forEach(ob => {\n    if (typeof ob.value !== \"string\") {\n      ob.value.forEach(key => {\n        const findGraph = graph.find({\n          formId: id,\n          optionId: key\n        }).exec((err, result) => {\n          if (result !== \"undefined\") {\n            if (result[0] !== \"undefined\") {\n              const answe = graph.findOneAndUpdate({\n                _id: result[0]._id\n              }, {\n                $inc: {\n                  count: 1\n                }\n              }).exec((errrr, anss) => {\n                console.log(errrr);\n              });\n            }\n          }\n        });\n      });\n    } else {\n      if (ob !== \"undefined\") {\n        const findGrap = graph.find({\n          formId: id,\n          text: ob.value\n        }).exec((err, result) => {\n          if (result !== \"undefined\") {\n            if (result[0] !== \"undefined\") {\n              const answer = graph.findOneAndUpdate({\n                _id: result[0]._id\n              }, {\n                $inc: {\n                  count: 1\n                }\n              }).exec((errr, ans) => {\n                console.log(errr);\n              });\n            }\n          }\n        });\n      }\n    }\n  });\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const findGraph = await graph.findById(query.id);\n        res.json(findGraph);\n      } catch (error) {\n        res.status(400).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const handledAns = await handleoldansewers(req.body, query.id);\n        res.json(handledAns);\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}