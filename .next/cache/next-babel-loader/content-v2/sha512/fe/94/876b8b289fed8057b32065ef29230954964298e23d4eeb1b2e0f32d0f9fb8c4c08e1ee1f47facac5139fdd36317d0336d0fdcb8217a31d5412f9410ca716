{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  const lookup = data.reduce((a, e) => {\n    a[e.qusetionId] = ++a[e.qusetionId] || 0;\n    return a;\n  }, {});\n  console.log(data.filter(e => lookup[e.qusetionId]));\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          handlegraphshape(data);\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","lookup","reduce","a","e","qusetionId","console","log","filter","req","res","method","query","find","formId","id","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,QAAMC,MAAM,GAAGD,IAAI,CAACE,MAAL,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpCD,IAAAA,CAAC,CAACC,CAAC,CAACC,UAAH,CAAD,GAAkB,EAAEF,CAAC,CAACC,CAAC,CAACC,UAAH,CAAH,IAAqB,CAAvC;AACA,WAAOF,CAAP;AACA,GAHc,EAGZ,EAHY,CAAf;AAKAG,EAAAA,OAAO,CAACC,GAAR,CAAYP,IAAI,CAACQ,MAAL,CAAaJ,CAAD,IAAOH,MAAM,CAACG,CAAC,CAACC,UAAH,CAAzB,CAAZ;AACA,CAPD;;AASA,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMX,IAAI,GAAG,MAAMF,KAAK,CAACe,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEF,KAAK,CAACG;AAAhB,SAAX,CAAnB;;AACA,YAAIf,IAAJ,EAAU;AACTD,UAAAA,gBAAgB,CAACC,IAAD,CAAhB;AACA;AACD,OALD,CAKE,OAAOgB,KAAP,EAAc;AACfV,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBS,KAAnB;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tconst lookup = data.reduce((a, e) => {\r\n\t\ta[e.qusetionId] = ++a[e.qusetionId] || 0;\r\n\t\treturn a;\r\n\t}, {});\r\n\r\n\tconsole.log(data.filter((e) => lookup[e.qusetionId]));\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\thandlegraphshape(data);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}