{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  let history = data;\n  let newdata = [];\n  let difrentques = [];\n  let samequestion = [];\n  data.forEac((objec, i) => {\n    if (samequestion.length > 0) {\n      samequestion.forEach(oo => {\n        history.forEach((obje, i) => {\n          if (oo.qusetionid === obje.qusetionid) {\n            samequestion.push(objec);\n          } else {\n            difrentques.push(obje);\n          }\n        });\n        history = difrentques;\n        samequestion = [];\n      });\n    } else {\n      samequestion.push(objec);\n    }\n\n    newdata.push({\n      ques: objec.ques,\n      options: samequestion\n    });\n  });\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          console.log(handlegraphshape(data));\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","history","newdata","difrentques","samequestion","forEac","objec","i","length","forEach","oo","obje","qusetionid","push","ques","options","req","res","method","query","find","formId","id","console","log","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,MAAIC,OAAO,GAAGD,IAAd;AACA,MAAIE,OAAO,GAAG,EAAd;AACA,MAAIC,WAAW,GAAG,EAAlB;AACA,MAAIC,YAAY,GAAG,EAAnB;AACAJ,EAAAA,IAAI,CAACK,MAAL,CAAY,CAACC,KAAD,EAAQC,CAAR,KAAc;AACzB,QAAIH,YAAY,CAACI,MAAb,GAAsB,CAA1B,EAA6B;AAC5BJ,MAAAA,YAAY,CAACK,OAAb,CAAsBC,EAAD,IAAQ;AAC5BT,QAAAA,OAAO,CAACQ,OAAR,CAAgB,CAACE,IAAD,EAAOJ,CAAP,KAAa;AAC5B,cAAIG,EAAE,CAACE,UAAH,KAAkBD,IAAI,CAACC,UAA3B,EAAuC;AACtCR,YAAAA,YAAY,CAACS,IAAb,CAAkBP,KAAlB;AACA,WAFD,MAEO;AACNH,YAAAA,WAAW,CAACU,IAAZ,CAAiBF,IAAjB;AACA;AACD,SAND;AAOAV,QAAAA,OAAO,GAAGE,WAAV;AACAC,QAAAA,YAAY,GAAG,EAAf;AACA,OAVD;AAWA,KAZD,MAYO;AACNA,MAAAA,YAAY,CAACS,IAAb,CAAkBP,KAAlB;AACA;;AAEDJ,IAAAA,OAAO,CAACW,IAAR,CAAa;AAAEC,MAAAA,IAAI,EAAER,KAAK,CAACQ,IAAd;AAAoBC,MAAAA,OAAO,EAAEX;AAA7B,KAAb;AACA,GAlBD;AAoBA,SAAOF,OAAP;AACA,CA1BD;;AA4BA,gBAAe,OAAOc,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMlB,IAAI,GAAG,MAAMF,KAAK,CAACsB,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEF,KAAK,CAACG;AAAhB,SAAX,CAAnB;;AACA,YAAItB,IAAJ,EAAU;AACTuB,UAAAA,OAAO,CAACC,GAAR,CAAYzB,gBAAgB,CAACC,IAAD,CAA5B;AACA;AACD,OALD,CAKE,OAAOyB,KAAP,EAAc;AACfF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,KAAnB;AACAR,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tlet history = data;\r\n\tlet newdata = [];\r\n\tlet difrentques = [];\r\n\tlet samequestion = [];\r\n\tdata.forEac((objec, i) => {\r\n\t\tif (samequestion.length > 0) {\r\n\t\t\tsamequestion.forEach((oo) => {\r\n\t\t\t\thistory.forEach((obje, i) => {\r\n\t\t\t\t\tif (oo.qusetionid === obje.qusetionid) {\r\n\t\t\t\t\t\tsamequestion.push(objec);\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tdifrentques.push(obje);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\thistory = difrentques;\r\n\t\t\t\tsamequestion = [];\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsamequestion.push(objec);\r\n\t\t}\r\n\r\n\t\tnewdata.push({ ques: objec.ques, options: samequestion });\r\n\t});\r\n\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tconsole.log(handlegraphshape(data));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}