{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = (data, formid) => {\n  let newgraphans = [];\n  const l = data.length;\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n\n    if (element.options) {\n      const kl = element.options.length;\n\n      for (let k = 0; k < kl; k++) {\n        const elementt = element.options[k];\n        graph.find({\n          formId: formid,\n          qusetionId: element.id,\n          optionId: elementt.key\n        }).exec((err, data) => {\n          if (data.length < 1) {\n            const newgraf = new graph({\n              _id: new mongoose.Types.ObjectId(),\n              formId: formid,\n              qusetionId: element.id,\n              ques: element.label,\n              optionId: elementt.key,\n              text: elementt.text,\n              count: 0\n            });\n            newgraf.save().then(data => {\n              console.log(data);\n            });\n          } else {\n            if (data[0].text === \"Place holder option 1\" || data[0].text === \"Place holder option 2\" || data[0].text === \"Place holder option 3\" || data[0].text === \"Place holder option 4\") {\n              graph.findOneAndDelete({\n                _id: data[0]._id\n              });\n            }\n          }\n        });\n      }\n    }\n  }\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          if (data.tools) {\n            res.json([...data.tools]);\n          }\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          const handlegraph = await handleGraphdata(req.body.task_data, query.id);\n\n          if (handlegraph) {\n            const handledAn = await handleoldansewers(req.body, query.id);\n            res.status(200).json(handledAn);\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":null,"metadata":{},"sourceType":"module"}