{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  let newdata = [];\n  const alreadygot = [];\n  data.forEach((objec, i) => {\n    if (alreadygot.length > 0) {\n      alreadygot.forEach(q => {\n        if (q !== objec.ques) {\n          graph.find({\n            formId: objec.formId,\n            ques: objec.ques\n          }).exec((err, result) => {\n            newdata.push({\n              ques: objec.ques,\n              options: result\n            });\n            console.log(\"newdata\", newdata);\n          });\n        }\n      });\n    } else {\n      if (alreadygot.length < 1) {\n        graph.find({\n          formId: objec.formId,\n          ques: objec.ques\n        }).exec((err, result) => {\n          newdata.push({\n            ques: objec.ques,\n            options: result\n          });\n        });\n      }\n    }\n\n    alreadygot.push(objec.ques);\n  });\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          console.log(handlegraphshape(data));\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","newdata","alreadygot","forEach","objec","i","length","q","ques","find","formId","exec","err","result","push","options","console","log","req","res","method","query","id","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,MAAIC,OAAO,GAAG,EAAd;AACA,QAAMC,UAAU,GAAG,EAAnB;AACAF,EAAAA,IAAI,CAACG,OAAL,CAAa,CAACC,KAAD,EAAQC,CAAR,KAAc;AAC1B,QAAIH,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AAC1BJ,MAAAA,UAAU,CAACC,OAAX,CAAoBI,CAAD,IAAO;AACzB,YAAIA,CAAC,KAAKH,KAAK,CAACI,IAAhB,EAAsB;AACrBV,UAAAA,KAAK,CACHW,IADF,CACO;AAAEC,YAAAA,MAAM,EAAEN,KAAK,CAACM,MAAhB;AAAwBF,YAAAA,IAAI,EAAEJ,KAAK,CAACI;AAApC,WADP,EAEEG,IAFF,CAEO,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACtBZ,YAAAA,OAAO,CAACa,IAAR,CAAa;AAAEN,cAAAA,IAAI,EAAEJ,KAAK,CAACI,IAAd;AAAoBO,cAAAA,OAAO,EAAEF;AAA7B,aAAb;AACAG,YAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBhB,OAAvB;AACA,WALF;AAMA;AACD,OATD;AAUA,KAXD,MAWO;AACN,UAAIC,UAAU,CAACI,MAAX,GAAoB,CAAxB,EAA2B;AAC1BR,QAAAA,KAAK,CACHW,IADF,CACO;AAAEC,UAAAA,MAAM,EAAEN,KAAK,CAACM,MAAhB;AAAwBF,UAAAA,IAAI,EAAEJ,KAAK,CAACI;AAApC,SADP,EAEEG,IAFF,CAEO,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACtBZ,UAAAA,OAAO,CAACa,IAAR,CAAa;AAAEN,YAAAA,IAAI,EAAEJ,KAAK,CAACI,IAAd;AAAoBO,YAAAA,OAAO,EAAEF;AAA7B,WAAb;AACA,SAJF;AAKA;AACD;;AACDX,IAAAA,UAAU,CAACY,IAAX,CAAgBV,KAAK,CAACI,IAAtB;AACA,GAtBD;AAwBA,SAAOP,OAAP;AACA,CA5BD;;AA8BA,gBAAe,OAAOiB,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMpB,IAAI,GAAG,MAAMF,KAAK,CAACW,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEW,KAAK,CAACC;AAAhB,SAAX,CAAnB;;AACA,YAAItB,IAAJ,EAAU;AACTgB,UAAAA,OAAO,CAACC,GAAR,CAAYlB,gBAAgB,CAACC,IAAD,CAA5B;AACA;AACD,OALD,CAKE,OAAOuB,KAAP,EAAc;AACfP,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBM,KAAnB;AACAJ,QAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tlet newdata = [];\r\n\tconst alreadygot = [];\r\n\tdata.forEach((objec, i) => {\r\n\t\tif (alreadygot.length > 0) {\r\n\t\t\talreadygot.forEach((q) => {\r\n\t\t\t\tif (q !== objec.ques) {\r\n\t\t\t\t\tgraph\r\n\t\t\t\t\t\t.find({ formId: objec.formId, ques: objec.ques })\r\n\t\t\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\t\t\tnewdata.push({ ques: objec.ques, options: result });\r\n\t\t\t\t\t\t\tconsole.log(\"newdata\", newdata);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tif (alreadygot.length < 1) {\r\n\t\t\t\tgraph\r\n\t\t\t\t\t.find({ formId: objec.formId, ques: objec.ques })\r\n\t\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\t\tnewdata.push({ ques: objec.ques, options: result });\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t\talreadygot.push(objec.ques);\r\n\t});\r\n\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tconsole.log(handlegraphshape(data));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}