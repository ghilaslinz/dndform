{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handleoldansewers = async (newGraphdata, id) => {\n  newGraphdata.forEach(ob => {\n    if (typeof ob.value !== \"string\") {\n      ob.value.forEach(key => {\n        const findGraph = graph.find({\n          formId: id,\n          optionId: key\n        }).exec((err, resul) => {\n          if (resul[0].optionId) {\n            const answe = graph.findOneAndUpdate({\n              _id: resul[0]._id\n            }, {\n              $inc: {\n                count: 1\n              }\n            }).exec((errrr, anss) => {\n              console.log(errrr);\n              console.log(\"22ans\", anss);\n            });\n          }\n        });\n      });\n    } else {\n      const findGrap = graph.find({\n        formId: id,\n        optionId: key\n      }).exec((err, result) => {\n        if (result[0].optionId) {\n          const answer = graph.findOneAndUpdate({\n            _id: result[0]._id\n          }, {\n            $inc: {\n              count: 1\n            }\n          }).exec((errr, ans) => {\n            console.log(errr);\n            console.log(\"22ans\", ans);\n          });\n        }\n      });\n    }\n  });\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const findGraph = await graph.findById(query.id);\n        res.json(findGraph);\n      } catch (error) {\n        res.status(400).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const handledAns = await handleoldansewers(req.body, query.id);\n        res.json(handledAns);\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/submitform/[id].js"],"names":["dbconnect","graph","handleoldansewers","newGraphdata","id","forEach","ob","value","key","findGraph","find","formId","optionId","exec","err","resul","answe","findOneAndUpdate","_id","$inc","count","errrr","anss","console","log","findGrap","result","answer","errr","ans","req","res","method","query","findById","json","error","status","end","handledAns","body","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AAEA,OAAOC,KAAP,MAAkB,gCAAlB;AAEAD,SAAS;;AAET,MAAME,iBAAiB,GAAG,OAAOC,YAAP,EAAqBC,EAArB,KAA4B;AACrDD,EAAAA,YAAY,CAACE,OAAb,CAAsBC,EAAD,IAAQ;AAC5B,QAAI,OAAOA,EAAE,CAACC,KAAV,KAAoB,QAAxB,EAAkC;AACjCD,MAAAA,EAAE,CAACC,KAAH,CAASF,OAAT,CAAkBG,GAAD,IAAS;AACzB,cAAMC,SAAS,GAAGR,KAAK,CACrBS,IADgB,CACX;AAAEC,UAAAA,MAAM,EAAEP,EAAV;AAAcQ,UAAAA,QAAQ,EAAEJ;AAAxB,SADW,EAEhBK,IAFgB,CAEX,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACrB,cAAIA,KAAK,CAAC,CAAD,CAAL,CAASH,QAAb,EAAuB;AACtB,kBAAMI,KAAK,GAAGf,KAAK,CACjBgB,gBADY,CACK;AAAEC,cAAAA,GAAG,EAAEH,KAAK,CAAC,CAAD,CAAL,CAASG;AAAhB,aADL,EAC4B;AAAEC,cAAAA,IAAI,EAAE;AAAEC,gBAAAA,KAAK,EAAE;AAAT;AAAR,aAD5B,EAEZP,IAFY,CAEP,CAACQ,KAAD,EAAQC,IAAR,KAAiB;AACtBC,cAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAEAE,cAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBF,IAArB;AACA,aANY,CAAd;AAOA;AACD,SAZgB,CAAlB;AAaA,OAdD;AAeA,KAhBD,MAgBO;AACN,YAAMG,QAAQ,GAAGxB,KAAK,CACpBS,IADe,CACV;AAAEC,QAAAA,MAAM,EAAEP,EAAV;AAAcQ,QAAAA,QAAQ,EAAEJ;AAAxB,OADU,EAEfK,IAFe,CAEV,CAACC,GAAD,EAAMY,MAAN,KAAiB;AACtB,YAAIA,MAAM,CAAC,CAAD,CAAN,CAAUd,QAAd,EAAwB;AACvB,gBAAMe,MAAM,GAAG1B,KAAK,CAClBgB,gBADa,CACI;AAAEC,YAAAA,GAAG,EAAEQ,MAAM,CAAC,CAAD,CAAN,CAAUR;AAAjB,WADJ,EAC4B;AAAEC,YAAAA,IAAI,EAAE;AAAEC,cAAAA,KAAK,EAAE;AAAT;AAAR,WAD5B,EAEbP,IAFa,CAER,CAACe,IAAD,EAAOC,GAAP,KAAe;AACpBN,YAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AAEAL,YAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBK,GAArB;AACA,WANa,CAAf;AAOA;AACD,OAZe,CAAjB;AAaA;AACD,GAhCD;AAiCA,CAlCD;;AAoCA,gBAAe,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMvB,SAAS,GAAG,MAAMR,KAAK,CAACiC,QAAN,CAAeD,KAAK,CAAC7B,EAArB,CAAxB;AACA2B,QAAAA,GAAG,CAACI,IAAJ,CAAS1B,SAAT;AACA,OAHD,CAGE,OAAO2B,KAAP,EAAc;AACfL,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,UAAAA;AAAF,SAArB;AACAL,QAAAA,GAAG,CAACO,GAAJ;AACA;;AACD;;AACD,SAAK,MAAL;AACC,UAAI;AACH,cAAMC,UAAU,GAAG,MAAMrC,iBAAiB,CAAC4B,GAAG,CAACU,IAAL,EAAWP,KAAK,CAAC7B,EAAjB,CAA1C;AACA2B,QAAAA,GAAG,CAACI,IAAJ,CAASI,UAAT;AACA,OAHD,CAGE,OAAOH,KAAP,EAAc;AACfb,QAAAA,OAAO,CAACC,GAAR,CAAYY,KAAZ;AACAL,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AArBF;AAuBA,CAzBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\n\r\nimport graph from \"../../../mongoose/models/graph\";\r\n\r\ndbconnect();\r\n\r\nconst handleoldansewers = async (newGraphdata, id) => {\r\n\tnewGraphdata.forEach((ob) => {\r\n\t\tif (typeof ob.value !== \"string\") {\r\n\t\t\tob.value.forEach((key) => {\r\n\t\t\t\tconst findGraph = graph\r\n\t\t\t\t\t.find({ formId: id, optionId: key })\r\n\t\t\t\t\t.exec((err, resul) => {\r\n\t\t\t\t\t\tif (resul[0].optionId) {\r\n\t\t\t\t\t\t\tconst answe = graph\r\n\t\t\t\t\t\t\t\t.findOneAndUpdate({ _id: resul[0]._id }, { $inc: { count: 1 } })\r\n\t\t\t\t\t\t\t\t.exec((errrr, anss) => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(errrr);\r\n\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"22ans\", anss);\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst findGrap = graph\r\n\t\t\t\t.find({ formId: id, optionId: key })\r\n\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\tif (result[0].optionId) {\r\n\t\t\t\t\t\tconst answer = graph\r\n\t\t\t\t\t\t\t.findOneAndUpdate({ _id: result[0]._id }, { $inc: { count: 1 } })\r\n\t\t\t\t\t\t\t.exec((errr, ans) => {\r\n\t\t\t\t\t\t\t\tconsole.log(errr);\r\n\r\n\t\t\t\t\t\t\t\tconsole.log(\"22ans\", ans);\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst findGraph = await graph.findById(query.id);\r\n\t\t\t\tres.json(findGraph);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(400).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tconst handledAns = await handleoldansewers(req.body, query.id);\r\n\t\t\t\tres.json(handledAns);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}