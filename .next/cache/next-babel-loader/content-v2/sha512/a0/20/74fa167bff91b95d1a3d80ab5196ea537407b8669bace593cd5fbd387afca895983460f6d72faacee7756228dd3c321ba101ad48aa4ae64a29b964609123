{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useMemo } from \"react\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport reducers from \"./reducers\";\nimport logger from \"redux-logger\";\nlet store;\nconst middlewares = [logger, thunkMiddleware];\n\nfunction initStore(initialState) {\n  return createStore(reducers, initialState, applyMiddleware(...middlewares));\n}\n\nexport const initializeStore = preloadedState => {\n  var _store2;\n\n  let _store = (_store2 = store) !== null && _store2 !== void 0 ? _store2 : initStore(preloadedState); // After navigating to a page with an initial Redux state, merge that state\n  // with the current state in the store, and create a new store\n\n\n  if (preloadedState && store) {\n    _store = initStore(_objectSpread(_objectSpread({}, store.getState()), preloadedState)); // Reset the current store\n\n    store = undefined;\n  } // For SSG and SSR always create a new store\n\n\n  if (true) return _store; // Create the store once in the client\n\n  if (!store) store = _store;\n  return _store;\n};\nexport function useStore(initialState) {\n  const store = useMemo(() => initializeStore(initialState), [initialState]);\n  return store;\n}","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/redax/store.js"],"names":["useMemo","createStore","applyMiddleware","thunkMiddleware","reducers","logger","store","middlewares","initStore","initialState","initializeStore","preloadedState","_store","getState","undefined","useStore"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,OAAOC,eAAP,MAA4B,aAA5B;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,IAAIC,KAAJ;AACA,MAAMC,WAAW,GAAG,CAACF,MAAD,EAASF,eAAT,CAApB;;AACA,SAASK,SAAT,CAAmBC,YAAnB,EAAiC;AAChC,SAAOR,WAAW,CAACG,QAAD,EAAWK,YAAX,EAAyBP,eAAe,CAAC,GAAGK,WAAJ,CAAxC,CAAlB;AACA;;AAED,OAAO,MAAMG,eAAe,GAAIC,cAAD,IAAoB;AAAA;;AAClD,MAAIC,MAAM,cAAGN,KAAH,6CAAYE,SAAS,CAACG,cAAD,CAA/B,CADkD,CAGlD;AACA;;;AACA,MAAIA,cAAc,IAAIL,KAAtB,EAA6B;AAC5BM,IAAAA,MAAM,GAAGJ,SAAS,iCACdF,KAAK,CAACO,QAAN,EADc,GAEdF,cAFc,EAAlB,CAD4B,CAK5B;;AACAL,IAAAA,KAAK,GAAGQ,SAAR;AACA,GAZiD,CAclD;;;AACA,YAAmC,OAAOF,MAAP,CAfe,CAgBlD;;AACA,MAAI,CAACN,KAAL,EAAYA,KAAK,GAAGM,MAAR;AAEZ,SAAOA,MAAP;AACA,CApBM;AAsBP,OAAO,SAASG,QAAT,CAAkBN,YAAlB,EAAgC;AACtC,QAAMH,KAAK,GAAGN,OAAO,CAAC,MAAMU,eAAe,CAACD,YAAD,CAAtB,EAAsC,CAACA,YAAD,CAAtC,CAArB;AACA,SAAOH,KAAP;AACA","sourcesContent":["import { useMemo } from \"react\";\r\nimport { createStore, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport reducers from \"./reducers\";\r\nimport logger from \"redux-logger\";\r\nlet store;\r\nconst middlewares = [logger, thunkMiddleware];\r\nfunction initStore(initialState) {\r\n\treturn createStore(reducers, initialState, applyMiddleware(...middlewares));\r\n}\r\n\r\nexport const initializeStore = (preloadedState) => {\r\n\tlet _store = store ?? initStore(preloadedState);\r\n\r\n\t// After navigating to a page with an initial Redux state, merge that state\r\n\t// with the current state in the store, and create a new store\r\n\tif (preloadedState && store) {\r\n\t\t_store = initStore({\r\n\t\t\t...store.getState(),\r\n\t\t\t...preloadedState,\r\n\t\t});\r\n\t\t// Reset the current store\r\n\t\tstore = undefined;\r\n\t}\r\n\r\n\t// For SSG and SSR always create a new store\r\n\tif (typeof window === \"undefined\") return _store;\r\n\t// Create the store once in the client\r\n\tif (!store) store = _store;\r\n\r\n\treturn _store;\r\n};\r\n\r\nexport function useStore(initialState) {\r\n\tconst store = useMemo(() => initializeStore(initialState), [initialState]);\r\n\treturn store;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}