{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  let newdata = [];\n\n  for (let i = 0; i < data.length; i++) {\n    let samequestion = [];\n    const element = data[i];\n    data.forEach(objec => {\n      if (element.qusetionId === objec.qusetionId) {\n        samequestion.push(element);\n      }\n    });\n\n    if (newdata.length) {\n      newdata.forEach(ob => {\n        if (ob.ques !== element.ques) {\n          newdata.push({\n            ques: element.ques,\n            options: samequestion\n          });\n        }\n      });\n    }\n  }\n\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          console.log(handlegraphshape(data));\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","newdata","i","length","samequestion","element","forEach","objec","qusetionId","push","ob","ques","options","req","res","method","query","find","formId","id","console","log","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,MAAIC,OAAO,GAAG,EAAd;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,IAAI,CAACG,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACrC,QAAIE,YAAY,GAAG,EAAnB;AACA,UAAMC,OAAO,GAAGL,IAAI,CAACE,CAAD,CAApB;AACAF,IAAAA,IAAI,CAACM,OAAL,CAAcC,KAAD,IAAW;AACvB,UAAIF,OAAO,CAACG,UAAR,KAAuBD,KAAK,CAACC,UAAjC,EAA6C;AAC5CJ,QAAAA,YAAY,CAACK,IAAb,CAAkBJ,OAAlB;AACA;AACD,KAJD;;AAKA,QAAIJ,OAAO,CAACE,MAAZ,EAAoB;AACnBF,MAAAA,OAAO,CAACK,OAAR,CAAiBI,EAAD,IAAQ;AACvB,YAAIA,EAAE,CAACC,IAAH,KAAYN,OAAO,CAACM,IAAxB,EAA8B;AAC7BV,UAAAA,OAAO,CAACQ,IAAR,CAAa;AAAEE,YAAAA,IAAI,EAAEN,OAAO,CAACM,IAAhB;AAAsBC,YAAAA,OAAO,EAAER;AAA/B,WAAb;AACA;AACD,OAJD;AAKA;AACD;;AAED,SAAOH,OAAP;AACA,CArBD;;AAuBA,gBAAe,OAAOY,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMf,IAAI,GAAG,MAAMF,KAAK,CAACmB,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEF,KAAK,CAACG;AAAhB,SAAX,CAAnB;;AACA,YAAInB,IAAJ,EAAU;AACToB,UAAAA,OAAO,CAACC,GAAR,CAAYtB,gBAAgB,CAACC,IAAD,CAA5B;AACA;AACD,OALD,CAKE,OAAOsB,KAAP,EAAc;AACfF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,KAAnB;AACAR,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tlet newdata = [];\r\n\r\n\tfor (let i = 0; i < data.length; i++) {\r\n\t\tlet samequestion = [];\r\n\t\tconst element = data[i];\r\n\t\tdata.forEach((objec) => {\r\n\t\t\tif (element.qusetionId === objec.qusetionId) {\r\n\t\t\t\tsamequestion.push(element);\r\n\t\t\t}\r\n\t\t});\r\n\t\tif (newdata.length) {\r\n\t\t\tnewdata.forEach((ob) => {\r\n\t\t\t\tif (ob.ques !== element.ques) {\r\n\t\t\t\t\tnewdata.push({ ques: element.ques, options: samequestion });\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tconsole.log(handlegraphshape(data));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}