{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handlegraphshape = data => {\n  let newdata = [];\n  alred;\n  data.forEach((objec, i) => {\n    const samequestion = graph.find({\n      formId: objec.formId,\n      ques: objec.ques\n    }).exec();\n    newdata.push({\n      ques: objec.ques,\n      options: samequestion\n    });\n  });\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await graph.find({\n          formId: query.id\n        });\n\n        if (data) {\n          console.log(handlegraphshape(data));\n        }\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","handlegraphshape","data","newdata","alred","forEach","objec","i","samequestion","find","formId","ques","exec","push","options","req","res","method","query","id","console","log","error","status","json","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACAD,SAAS;;AAET,MAAME,gBAAgB,GAAIC,IAAD,IAAU;AAClC,MAAIC,OAAO,GAAG,EAAd;AACAC,EAAAA,KAAK;AACLF,EAAAA,IAAI,CAACG,OAAL,CAAa,CAACC,KAAD,EAAQC,CAAR,KAAc;AAC1B,UAAMC,YAAY,GAAGR,KAAK,CACxBS,IADmB,CACd;AAAEC,MAAAA,MAAM,EAAEJ,KAAK,CAACI,MAAhB;AAAwBC,MAAAA,IAAI,EAAEL,KAAK,CAACK;AAApC,KADc,EAEnBC,IAFmB,EAArB;AAIAT,IAAAA,OAAO,CAACU,IAAR,CAAa;AAAEF,MAAAA,IAAI,EAAEL,KAAK,CAACK,IAAd;AAAoBG,MAAAA,OAAO,EAAEN;AAA7B,KAAb;AACA,GAND;AAQA,SAAOL,OAAP;AACA,CAZD;;AAcA,gBAAe,OAAOY,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMf,IAAI,GAAG,MAAMF,KAAK,CAACS,IAAN,CAAW;AAAEC,UAAAA,MAAM,EAAEQ,KAAK,CAACC;AAAhB,SAAX,CAAnB;;AACA,YAAIjB,IAAJ,EAAU;AACTkB,UAAAA,OAAO,CAACC,GAAR,CAAYpB,gBAAgB,CAACC,IAAD,CAA5B;AACA;AACD,OALD,CAKE,OAAOoB,KAAP,EAAc;AACfF,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBC,KAAnB;AACAN,QAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEC,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAdF;AAgBA,CAlBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = (data) => {\r\n\tlet newdata = [];\r\n\talred;\r\n\tdata.forEach((objec, i) => {\r\n\t\tconst samequestion = graph\r\n\t\t\t.find({ formId: objec.formId, ques: objec.ques })\r\n\t\t\t.exec();\r\n\r\n\t\tnewdata.push({ ques: objec.ques, options: samequestion });\r\n\t});\r\n\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await graph.find({ formId: query.id });\r\n\t\t\t\tif (data) {\r\n\t\t\t\t\tconsole.log(handlegraphshape(data));\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}