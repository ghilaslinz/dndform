{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\nimport form from \"../../../mongoose/models/form\";\ndbconnect();\n\nconst getit = async () => {\n  const ss = await graph.find({\n    formId: id,\n    ques: tool.label\n  }).exec((err, result) => {\n    newdata.push({\n      label: tool.label,\n      options: result\n    });\n  });\n  return ss;\n};\n\nconst getgraph = async (data, id) => {\n  const newdata = [];\n\n  if (data) {\n    for (let i = 0; i < data[0].tools.length; i++) {\n      const tool = data[0].tools[i];\n    }\n  }\n\n  return newdata;\n};\n\nconst handlegraphshape = async (id, res) => {\n  const data = await form.find({\n    _id: id\n  }).exec();\n  return data;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await handlegraphshape(query.id);\n        const newdata = await getgraph(data, query.id);\n        res.json(newdata);\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","form","getit","ss","find","formId","id","ques","tool","label","exec","err","result","newdata","push","options","getgraph","data","i","tools","length","handlegraphshape","res","_id","req","method","query","json","error","console","log","status","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACAF,SAAS;;AAET,MAAMG,KAAK,GAAG,YAAY;AACzB,QAAMC,EAAE,GAAG,MAAMH,KAAK,CACpBI,IADe,CACV;AAAEC,IAAAA,MAAM,EAAEC,EAAV;AAAcC,IAAAA,IAAI,EAAEC,IAAI,CAACC;AAAzB,GADU,EAEfC,IAFe,CAEV,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACtBC,IAAAA,OAAO,CAACC,IAAR,CAAa;AAAEL,MAAAA,KAAK,EAAED,IAAI,CAACC,KAAd;AAAqBM,MAAAA,OAAO,EAAEH;AAA9B,KAAb;AACA,GAJe,CAAjB;AAKA,SAAOT,EAAP;AACA,CAPD;;AASA,MAAMa,QAAQ,GAAG,OAAOC,IAAP,EAAaX,EAAb,KAAoB;AACpC,QAAMO,OAAO,GAAG,EAAhB;;AACA,MAAII,IAAJ,EAAU;AACT,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC9C,YAAMV,IAAI,GAAGS,IAAI,CAAC,CAAD,CAAJ,CAAQE,KAAR,CAAcD,CAAd,CAAb;AACA;AACD;;AACD,SAAOL,OAAP;AACA,CARD;;AAUA,MAAMQ,gBAAgB,GAAG,OAAOf,EAAP,EAAWgB,GAAX,KAAmB;AAC3C,QAAML,IAAI,GAAG,MAAMhB,IAAI,CAACG,IAAL,CAAU;AAAEmB,IAAAA,GAAG,EAAEjB;AAAP,GAAV,EAAuBI,IAAvB,EAAnB;AAEA,SAAOO,IAAP;AACA,CAJD;;AAMA,gBAAe,OAAOO,GAAP,EAAYF,GAAZ,KAAoB;AAClC,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBF,GAA1B;;AACA,UAAQC,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMR,IAAI,GAAG,MAAMI,gBAAgB,CAACK,KAAK,CAACpB,EAAP,CAAnC;AACA,cAAMO,OAAO,GAAG,MAAMG,QAAQ,CAACC,IAAD,EAAOS,KAAK,CAACpB,EAAb,CAA9B;AACAgB,QAAAA,GAAG,CAACK,IAAJ,CAASd,OAAT;AACA,OAJD,CAIE,OAAOe,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,KAAnB;AACAN,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEK,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAbF;AAeA,CAjBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport form from \"../../../mongoose/models/form\";\r\ndbconnect();\r\n\r\nconst getit = async () => {\r\n\tconst ss = await graph\r\n\t\t.find({ formId: id, ques: tool.label })\r\n\t\t.exec((err, result) => {\r\n\t\t\tnewdata.push({ label: tool.label, options: result });\r\n\t\t});\r\n\treturn ss;\r\n};\r\n\r\nconst getgraph = async (data, id) => {\r\n\tconst newdata = [];\r\n\tif (data) {\r\n\t\tfor (let i = 0; i < data[0].tools.length; i++) {\r\n\t\t\tconst tool = data[0].tools[i];\r\n\t\t}\r\n\t}\r\n\treturn newdata;\r\n};\r\n\r\nconst handlegraphshape = async (id, res) => {\r\n\tconst data = await form.find({ _id: id }).exec();\r\n\r\n\treturn data;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await handlegraphshape(query.id);\r\n\t\t\t\tconst newdata = await getgraph(data, query.id);\r\n\t\t\t\tres.json(newdata);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}