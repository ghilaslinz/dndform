{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handleoldansewers = async (newGraphdata, id) => {\n  newGraphdata.forEach(ob => {\n    if (typeof ob.value !== \"string\") {\n      ob.value.forEach(key => {\n        const findGraph = graph.find({\n          optionId: id\n        }).exec();\n\n        if (findGraph.optionId) {\n          const ans = graph.findOneAndUpdate({\n            formId: id,\n            optionId: key\n          }, {\n            $inc: {\n              \"optionId.$.count\": 1\n            }\n          }).exec().then(d => {\n            console.log(\"d\", d);\n          });\n        }\n      });\n    } else {\n      const findGraph = graph.find({\n        optionId: id\n      }).exec();\n\n      if (findGraph.optionId) {\n        const ans = graph.findOneAndUpdate({\n          formId: id,\n          optionId: key\n        }, {\n          $inc: {\n            \"optionId.$.count\": 1\n          }\n        }).exec();\n        console.log(\"ans\", ans);\n      }\n    }\n  });\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const findGraph = await graph.findById(query.id);\n        res.json(findGraph);\n      } catch (error) {\n        res.status(400).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const handledAns = await handleoldansewers(req.body, query.id);\n        res.json(handledAns);\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/submitform/[id].js"],"names":["dbconnect","graph","handleoldansewers","newGraphdata","id","forEach","ob","value","key","findGraph","find","optionId","exec","ans","findOneAndUpdate","formId","$inc","then","d","console","log","req","res","method","query","findById","json","error","status","end","handledAns","body","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AAEA,OAAOC,KAAP,MAAkB,gCAAlB;AAEAD,SAAS;;AAET,MAAME,iBAAiB,GAAG,OAAOC,YAAP,EAAqBC,EAArB,KAA4B;AACrDD,EAAAA,YAAY,CAACE,OAAb,CAAsBC,EAAD,IAAQ;AAC5B,QAAI,OAAOA,EAAE,CAACC,KAAV,KAAoB,QAAxB,EAAkC;AACjCD,MAAAA,EAAE,CAACC,KAAH,CAASF,OAAT,CAAkBG,GAAD,IAAS;AACzB,cAAMC,SAAS,GAAGR,KAAK,CAACS,IAAN,CAAW;AAAEC,UAAAA,QAAQ,EAAEP;AAAZ,SAAX,EAA6BQ,IAA7B,EAAlB;;AAEA,YAAIH,SAAS,CAACE,QAAd,EAAwB;AACvB,gBAAME,GAAG,GAAGZ,KAAK,CACfa,gBADU,CAEV;AAAEC,YAAAA,MAAM,EAAEX,EAAV;AAAcO,YAAAA,QAAQ,EAAEH;AAAxB,WAFU,EAGV;AAAEQ,YAAAA,IAAI,EAAE;AAAE,kCAAoB;AAAtB;AAAR,WAHU,EAKVJ,IALU,GAMVK,IANU,CAMJC,CAAD,IAAO;AACZC,YAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAiBF,CAAjB;AACA,WARU,CAAZ;AASA;AACD,OAdD;AAeA,KAhBD,MAgBO;AACN,YAAMT,SAAS,GAAGR,KAAK,CAACS,IAAN,CAAW;AAAEC,QAAAA,QAAQ,EAAEP;AAAZ,OAAX,EAA6BQ,IAA7B,EAAlB;;AAEA,UAAIH,SAAS,CAACE,QAAd,EAAwB;AACvB,cAAME,GAAG,GAAGZ,KAAK,CACfa,gBADU,CAEV;AAAEC,UAAAA,MAAM,EAAEX,EAAV;AAAcO,UAAAA,QAAQ,EAAEH;AAAxB,SAFU,EAGV;AAAEQ,UAAAA,IAAI,EAAE;AAAE,gCAAoB;AAAtB;AAAR,SAHU,EAKVJ,IALU,EAAZ;AAMAO,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBP,GAAnB;AACA;AACD;AACD,GA9BD;AA+BA,CAhCD;;AAkCA,gBAAe,OAAOQ,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMd,SAAS,GAAG,MAAMR,KAAK,CAACwB,QAAN,CAAeD,KAAK,CAACpB,EAArB,CAAxB;AACAkB,QAAAA,GAAG,CAACI,IAAJ,CAASjB,SAAT;AACA,OAHD,CAGE,OAAOkB,KAAP,EAAc;AACfL,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEC,UAAAA;AAAF,SAArB;AACAL,QAAAA,GAAG,CAACO,GAAJ;AACA;;AACD;;AACD,SAAK,MAAL;AACC,UAAI;AACH,cAAMC,UAAU,GAAG,MAAM5B,iBAAiB,CAACmB,GAAG,CAACU,IAAL,EAAWP,KAAK,CAACpB,EAAjB,CAA1C;AACAkB,QAAAA,GAAG,CAACI,IAAJ,CAASI,UAAT;AACA,OAHD,CAGE,OAAOH,KAAP,EAAc;AACfR,QAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACAL,QAAAA,GAAG,CAACM,MAAJ,CAAW,GAAX,EAAgBF,IAAhB,CAAqB;AAAEM,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AArBF;AAuBA,CAzBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\n\r\nimport graph from \"../../../mongoose/models/graph\";\r\n\r\ndbconnect();\r\n\r\nconst handleoldansewers = async (newGraphdata, id) => {\r\n\tnewGraphdata.forEach((ob) => {\r\n\t\tif (typeof ob.value !== \"string\") {\r\n\t\t\tob.value.forEach((key) => {\r\n\t\t\t\tconst findGraph = graph.find({ optionId: id }).exec();\r\n\r\n\t\t\t\tif (findGraph.optionId) {\r\n\t\t\t\t\tconst ans = graph\r\n\t\t\t\t\t\t.findOneAndUpdate(\r\n\t\t\t\t\t\t\t{ formId: id, optionId: key },\r\n\t\t\t\t\t\t\t{ $inc: { \"optionId.$.count\": 1 } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec()\r\n\t\t\t\t\t\t.then((d) => {\r\n\t\t\t\t\t\t\tconsole.log(\"d\", d);\r\n\t\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst findGraph = graph.find({ optionId: id }).exec();\r\n\r\n\t\t\tif (findGraph.optionId) {\r\n\t\t\t\tconst ans = graph\r\n\t\t\t\t\t.findOneAndUpdate(\r\n\t\t\t\t\t\t{ formId: id, optionId: key },\r\n\t\t\t\t\t\t{ $inc: { \"optionId.$.count\": 1 } }\r\n\t\t\t\t\t)\r\n\t\t\t\t\t.exec();\r\n\t\t\t\tconsole.log(\"ans\", ans);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst findGraph = await graph.findById(query.id);\r\n\t\t\t\tres.json(findGraph);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(400).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tconst handledAns = await handleoldansewers(req.body, query.id);\r\n\t\t\t\tres.json(handledAns);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}