{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = (data, formid) => {\n  const l = data.length;\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n\n    if (element.options) {\n      const kl = element.options.length;\n\n      for (let k = 0; k < kl; k++) {\n        const elementt = element.options[k];\n        graph.find({\n          optionId: elementt.key\n        }).exec().then(data => {\n          console.log(\"data\", data);\n\n          if (data[0].optionId === \"undefined\" && data[0].optionId !== elementt.key) {\n            console.log(\"cretion\");\n            const newgraf = new graph({\n              _id: new mongoose.Types.ObjectId(),\n              formId: formid,\n              qusetionId: element.field_name,\n              ques: element.lebel,\n              optionId: elementt.key,\n              text: elementt.text,\n              count: 0\n            });\n            newgraf.save().then(data => {\n              return true;\n            });\n          } else {\n            console.log(\"allredy exists\");\n          }\n        });\n      }\n    }\n  }\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          if (data.tools) {\n            res.json([...data.tools]);\n          }\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          const handlegraph = await handleGraphdata(req.body.task_data, query.id);\n\n          if (handlegraph) {\n            res.status(200).json({\n              sucees: true\n            });\n          } else {\n            res.status(404).json({\n              sucees: false\n            });\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findform/[id].js"],"names":["dbconnect","form","graph","mongoose","handleGraphdata","data","formid","l","length","i","element","options","kl","k","elementt","find","optionId","key","exec","then","console","log","newgraf","_id","Types","ObjectId","formId","qusetionId","field_name","ques","lebel","text","count","save","req","res","method","query","findById","id","tools","json","error","status","end","body","task_data","updateOne","$set","handlegraph","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport form from \"../../../mongoose/models/form\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport mongoose from \"mongoose\";\r\ndbconnect();\r\n\r\nconst handleGraphdata = (data, formid) => {\r\n\tconst l = data.length;\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tif (element.options) {\r\n\t\t\tconst kl = element.options.length;\r\n\t\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\t\tconst elementt = element.options[k];\r\n\r\n\t\t\t\tgraph\r\n\t\t\t\t\t.find({\r\n\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.exec()\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tconsole.log(\"data\", data);\r\n\t\t\t\t\t\tif (\r\n\t\t\t\t\t\t\tdata[0].optionId === \"undefined\" &&\r\n\t\t\t\t\t\t\tdata[0].optionId !== elementt.key\r\n\t\t\t\t\t\t) {\r\n\t\t\t\t\t\t\tconsole.log(\"cretion\");\r\n\t\t\t\t\t\t\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\t\t\tqusetionId: element.field_name,\r\n\t\t\t\t\t\t\t\tques: element.lebel,\r\n\t\t\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t\t\t\ttext: elementt.text,\r\n\t\t\t\t\t\t\t\tcount: 0,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tconsole.log(\"allredy exists\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tawait form.findById(query.id).then((data) => {\r\n\t\t\t\t\tif (data.tools) {\r\n\t\t\t\t\t\tres.json([...data.tools]);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(404).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tif (req.body.task_data.length !== 0) {\r\n\t\t\t\t\tform\r\n\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t{ _id: query.id },\r\n\t\t\t\t\t\t\t{ $set: { tools: [...req.body.task_data] } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec();\r\n\t\t\t\t\tconst handlegraph = await handleGraphdata(\r\n\t\t\t\t\t\treq.body.task_data,\r\n\t\t\t\t\t\tquery.id\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (handlegraph) {\r\n\t\t\t\t\t\tres.status(200).json({ sucees: true });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}