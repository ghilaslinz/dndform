{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = (data, formid) => {\n  console.log(data);\n  const l = data.length;\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n\n    if (element.options !== \"undefined\") {\n      const kl = element.options.length;\n\n      for (let k = 0; k < kl; k++) {\n        const elementt = element.options[k];\n        graph.find({\n          formId: formid,\n          questionId: element.name,\n          optionId: elementt.key\n        }).exec().then(data => {\n          if (!data.optionId) {\n            const newgraf = new graph({\n              _id: new mongoose.Types.ObjectId(),\n              formId: formid,\n              qsestionid: element.field_name,\n              ques: lebel,\n              opotionId: elementt.key,\n              text: elementt.text,\n              count: 0\n            });\n            newgraf.save().then(data => {\n              return true;\n            });\n          } else {\n            return false;\n          }\n        });\n      }\n    }\n  }\n\n  return tools;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          res.json([...data.tools]);\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          const handlegraph = await handleGraphdata(req.body.task_data, query.id);\n\n          if (handlegraph) {\n            res.status(200).json({\n              sucees: true\n            });\n          } else {\n            res.status(404).json({\n              sucees: false\n            });\n          }\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findform/[id].js"],"names":["dbconnect","form","graph","mongoose","handleGraphdata","data","formid","console","log","l","length","i","element","options","kl","k","elementt","find","formId","questionId","name","optionId","key","exec","then","newgraf","_id","Types","ObjectId","qsestionid","field_name","ques","lebel","opotionId","text","count","save","tools","req","res","method","query","findById","id","json","error","status","end","body","task_data","updateOne","$set","handlegraph","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport form from \"../../../mongoose/models/form\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport mongoose from \"mongoose\";\r\ndbconnect();\r\n\r\nconst handleGraphdata = (data, formid) => {\r\n\tconsole.log(data);\r\n\tconst l = data.length;\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tif (element.options !== \"undefined\") {\r\n\t\t\tconst kl = element.options.length;\r\n\t\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\t\tconst elementt = element.options[k];\r\n\r\n\t\t\t\tgraph\r\n\t\t\t\t\t.find({\r\n\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\tquestionId: element.name,\r\n\t\t\t\t\t\toptionId: elementt.key,\r\n\t\t\t\t\t})\r\n\t\t\t\t\t.exec()\r\n\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\tif (!data.optionId) {\r\n\t\t\t\t\t\t\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t\t\tformId: formid,\r\n\t\t\t\t\t\t\t\tqsestionid: element.field_name,\r\n\t\t\t\t\t\t\t\tques: lebel,\r\n\t\t\t\t\t\t\t\topotionId: elementt.key,\r\n\t\t\t\t\t\t\t\ttext: elementt.text,\r\n\t\t\t\t\t\t\t\tcount: 0,\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\t\treturn true;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn tools;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tawait form.findById(query.id).then((data) => {\r\n\t\t\t\t\tres.json([...data.tools]);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(404).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tif (req.body.task_data.length !== 0) {\r\n\t\t\t\t\tform\r\n\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t{ _id: query.id },\r\n\t\t\t\t\t\t\t{ $set: { tools: [...req.body.task_data] } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec();\r\n\t\t\t\t\tconst handlegraph = await handleGraphdata(\r\n\t\t\t\t\t\treq.body.task_data,\r\n\t\t\t\t\t\tquery.id\r\n\t\t\t\t\t);\r\n\t\t\t\t\tif (handlegraph) {\r\n\t\t\t\t\t\tres.status(200).json({ sucees: true });\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}