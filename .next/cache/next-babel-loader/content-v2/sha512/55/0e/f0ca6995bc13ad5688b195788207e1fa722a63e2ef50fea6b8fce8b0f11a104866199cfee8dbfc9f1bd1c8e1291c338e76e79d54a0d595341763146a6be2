{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport form from \"../../../mongoose/models/form\";\nimport graph from \"../../../mongoose/models/graph\";\nimport mongoose from \"mongoose\";\ndbconnect();\n\nconst handleGraphdata = data => {\n  const l = data.length;\n  let options = [];\n\n  for (let i = 0; i < l; i++) {\n    const element = data[i];\n    const kl = element.options.length;\n    let option = [];\n\n    for (let k = 0; k < kl; k++) {\n      const elementt = element.options[k];\n      option.push({\n        key: elementt.key,\n        text: elementt.text,\n        count: 0\n      });\n    }\n\n    options.push({\n      name: element.field_name,\n      value: option\n    });\n  }\n\n  return options;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        await form.findById(query.id).then(data => {\n          res.json([...data.tools]);\n        });\n      } catch (error) {\n        res.status(404).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        if (req.body.task_data.length !== 0) {\n          form.updateOne({\n            _id: query.id\n          }, {\n            $set: {\n              tools: [...req.body.task_data]\n            }\n          }).exec();\n          const handlednotgrahfound = await handleGraphdata(...req.body.task_data);\n          await graph.find({\n            formId: query.id\n          }).exec().then(data => {\n            console.log(\"data\", data);\n\n            if (!data.length) {\n              const newgraf = new graph({\n                _id: new mongoose.Types.ObjectId(),\n                formId: query.id,\n                tools: [...handlednotgrahfound]\n              });\n              newgraf.save().then(data => {\n                console.log(\"created\");\n              });\n            } else {\n              const replace = graph.updateOne({\n                formId: query.id\n              }, {\n                tools: [...handlednotgrahfound]\n              }).exec();\n              console.log(\"replace\", replace);\n            }\n          });\n          console.log(handlednotgrahfound.options);\n        }\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findform/[id].js"],"names":["dbconnect","form","graph","mongoose","handleGraphdata","data","l","length","options","i","element","kl","option","k","elementt","push","key","text","count","name","field_name","value","req","res","method","query","findById","id","then","json","tools","error","status","end","body","task_data","updateOne","_id","$set","exec","handlednotgrahfound","find","formId","console","log","newgraf","Types","ObjectId","save","replace","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport form from \"../../../mongoose/models/form\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport mongoose from \"mongoose\";\r\ndbconnect();\r\n\r\nconst handleGraphdata = (data) => {\r\n\tconst l = data.length;\r\n\tlet options = [];\r\n\r\n\tfor (let i = 0; i < l; i++) {\r\n\t\tconst element = data[i];\r\n\t\tconst kl = element.options.length;\r\n\t\tlet option = [];\r\n\t\tfor (let k = 0; k < kl; k++) {\r\n\t\t\tconst elementt = element.options[k];\r\n\t\t\toption.push({ key: elementt.key, text: elementt.text, count: 0 });\r\n\t\t}\r\n\t\toptions.push({ name: element.field_name, value: option });\r\n\t}\r\n\r\n\treturn options;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tawait form.findById(query.id).then((data) => {\r\n\t\t\t\t\tres.json([...data.tools]);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(404).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tif (req.body.task_data.length !== 0) {\r\n\t\t\t\t\tform\r\n\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t{ _id: query.id },\r\n\t\t\t\t\t\t\t{ $set: { tools: [...req.body.task_data] } }\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\t.exec();\r\n\t\t\t\t\tconst handlednotgrahfound = await handleGraphdata(\r\n\t\t\t\t\t\t...req.body.task_data\r\n\t\t\t\t\t);\r\n\t\t\t\t\tawait graph\r\n\t\t\t\t\t\t.find({ formId: query.id })\r\n\t\t\t\t\t\t.exec()\r\n\t\t\t\t\t\t.then((data) => {\r\n\t\t\t\t\t\t\tconsole.log(\"data\", data);\r\n\t\t\t\t\t\t\tif (!data.length) {\r\n\t\t\t\t\t\t\t\tconst newgraf = new graph({\r\n\t\t\t\t\t\t\t\t\t_id: new mongoose.Types.ObjectId(),\r\n\t\t\t\t\t\t\t\t\tformId: query.id,\r\n\t\t\t\t\t\t\t\t\ttools: [...handlednotgrahfound],\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t\tnewgraf.save().then((data) => {\r\n\t\t\t\t\t\t\t\t\tconsole.log(\"created\");\r\n\t\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tconst replace = graph\r\n\t\t\t\t\t\t\t\t\t.updateOne(\r\n\t\t\t\t\t\t\t\t\t\t{ formId: query.id },\r\n\t\t\t\t\t\t\t\t\t\t{ tools: [...handlednotgrahfound] }\r\n\t\t\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t\t\t\t.exec();\r\n\t\t\t\t\t\t\t\tconsole.log(\"replace\", replace);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\tconsole.log(handlednotgrahfound.options);\r\n\t\t\t\t}\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}