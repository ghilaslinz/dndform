{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\nimport form from \"../../../mongoose/models/form\";\ndbconnect();\n\nconst getit = () => {};\n\nconst getgraph = async (data, id) => {\n  const newdata = [];\n\n  if (data) {\n    for (let i = 0; i < data[0].tools.length; i++) {\n      const tool = data[0].tools[i];\n      await graph.find({\n        formId: id,\n        ques: tool.label\n      }).exec((err, result) => {\n        newdata.push({\n          label: tool.label,\n          options: result\n        });\n      });\n    }\n  }\n\n  return newdata;\n};\n\nconst handlegraphshape = async (id, res) => {\n  const data = await form.find({\n    _id: id\n  }).exec();\n  return data;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const data = await handlegraphshape(query.id);\n        const newdata = await getgraph(data, query.id);\n        res.json(newdata);\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","form","getit","getgraph","data","id","newdata","i","tools","length","tool","find","formId","ques","label","exec","err","result","push","options","handlegraphshape","res","_id","req","method","query","json","error","console","log","status","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACAF,SAAS;;AAET,MAAMG,KAAK,GAAG,MAAM,CAAE,CAAtB;;AAEA,MAAMC,QAAQ,GAAG,OAAOC,IAAP,EAAaC,EAAb,KAAoB;AACpC,QAAMC,OAAO,GAAG,EAAhB;;AACA,MAAIF,IAAJ,EAAU;AACT,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAAR,CAAcC,MAAlC,EAA0CF,CAAC,EAA3C,EAA+C;AAC9C,YAAMG,IAAI,GAAGN,IAAI,CAAC,CAAD,CAAJ,CAAQI,KAAR,CAAcD,CAAd,CAAb;AACA,YAAMP,KAAK,CAACW,IAAN,CAAW;AAAEC,QAAAA,MAAM,EAAEP,EAAV;AAAcQ,QAAAA,IAAI,EAAEH,IAAI,CAACI;AAAzB,OAAX,EAA6CC,IAA7C,CAAkD,CAACC,GAAD,EAAMC,MAAN,KAAiB;AACxEX,QAAAA,OAAO,CAACY,IAAR,CAAa;AAAEJ,UAAAA,KAAK,EAAEJ,IAAI,CAACI,KAAd;AAAqBK,UAAAA,OAAO,EAAEF;AAA9B,SAAb;AACA,OAFK,CAAN;AAGA;AACD;;AACD,SAAOX,OAAP;AACA,CAXD;;AAaA,MAAMc,gBAAgB,GAAG,OAAOf,EAAP,EAAWgB,GAAX,KAAmB;AAC3C,QAAMjB,IAAI,GAAG,MAAMH,IAAI,CAACU,IAAL,CAAU;AAAEW,IAAAA,GAAG,EAAEjB;AAAP,GAAV,EAAuBU,IAAvB,EAAnB;AAEA,SAAOX,IAAP;AACA,CAJD;;AAMA,gBAAe,OAAOmB,GAAP,EAAYF,GAAZ,KAAoB;AAClC,QAAM;AAAEG,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBF,GAA1B;;AACA,UAAQC,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMpB,IAAI,GAAG,MAAMgB,gBAAgB,CAACK,KAAK,CAACpB,EAAP,CAAnC;AACA,cAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACC,IAAD,EAAOqB,KAAK,CAACpB,EAAb,CAA9B;AACAgB,QAAAA,GAAG,CAACK,IAAJ,CAASpB,OAAT;AACA,OAJD,CAIE,OAAOqB,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,KAAnB;AACAN,QAAAA,GAAG,CAACS,MAAJ,CAAW,GAAX,EAAgBJ,IAAhB,CAAqB;AAAEK,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AAbF;AAeA,CAjBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport form from \"../../../mongoose/models/form\";\r\ndbconnect();\r\n\r\nconst getit = () => {};\r\n\r\nconst getgraph = async (data, id) => {\r\n\tconst newdata = [];\r\n\tif (data) {\r\n\t\tfor (let i = 0; i < data[0].tools.length; i++) {\r\n\t\t\tconst tool = data[0].tools[i];\r\n\t\t\tawait graph.find({ formId: id, ques: tool.label }).exec((err, result) => {\r\n\t\t\t\tnewdata.push({ label: tool.label, options: result });\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\treturn newdata;\r\n};\r\n\r\nconst handlegraphshape = async (id, res) => {\r\n\tconst data = await form.find({ _id: id }).exec();\r\n\r\n\treturn data;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst data = await handlegraphshape(query.id);\r\n\t\t\t\tconst newdata = await getgraph(data, query.id);\r\n\t\t\t\tres.json(newdata);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}