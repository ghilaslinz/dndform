{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\nimport form from \"../../../mongoose/models/form\";\ndbconnect();\n\nconst handlegraphshape = async id => {\n  let newdata = [];\n  await form.find({\n    _id: id\n  }).exec((err, resul) => {\n    resul[0].tools.forEach(obj => {\n      graph.find({\n        formId: id,\n        ques: obj.label\n      }).exec((err, result) => {\n        return newdata.push({\n          label: obj.label,\n          options: result\n        });\n      });\n    });\n  });\n  return newdata;\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const newdata = [];\n        await form.find({\n          _id: query.id\n        }).exec((err, resul) => {\n          resul[0].tools.forEach(obj => {\n            graph.find({\n              formId: query.id,\n              ques: obj.label\n            }).exec((err, result) => {\n              newdata.push({\n                label: obj.label,\n                options: result\n              });\n            });\n          });\n          res.status(200).json(newdata);\n        });\n      } catch (error) {\n        console.log(\"err\", error);\n        res.status(404).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/findgraph/[id].js"],"names":["dbconnect","graph","form","handlegraphshape","id","newdata","find","_id","exec","err","resul","tools","forEach","obj","formId","ques","label","result","push","options","req","res","method","query","status","json","error","console","log","sucees"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,4BAAtB;AACA,OAAOC,KAAP,MAAkB,gCAAlB;AACA,OAAOC,IAAP,MAAiB,+BAAjB;AACAF,SAAS;;AAET,MAAMG,gBAAgB,GAAG,MAAOC,EAAP,IAAc;AACtC,MAAIC,OAAO,GAAG,EAAd;AAEA,QAAMH,IAAI,CAACI,IAAL,CAAU;AAAEC,IAAAA,GAAG,EAAEH;AAAP,GAAV,EAAuBI,IAAvB,CAA4B,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjDA,IAAAA,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAeC,OAAf,CAAwBC,GAAD,IAAS;AAC/BZ,MAAAA,KAAK,CAACK,IAAN,CAAW;AAAEQ,QAAAA,MAAM,EAAEV,EAAV;AAAcW,QAAAA,IAAI,EAAEF,GAAG,CAACG;AAAxB,OAAX,EAA4CR,IAA5C,CAAiD,CAACC,GAAD,EAAMQ,MAAN,KAAiB;AACjE,eAAOZ,OAAO,CAACa,IAAR,CAAa;AAAEF,UAAAA,KAAK,EAAEH,GAAG,CAACG,KAAb;AAAoBG,UAAAA,OAAO,EAAEF;AAA7B,SAAb,CAAP;AACA,OAFD;AAGA,KAJD;AAKA,GANK,CAAN;AAOA,SAAOZ,OAAP;AACA,CAXD;;AAaA,gBAAe,OAAOe,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAM;AAAEC,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAoBH,GAA1B;;AACA,UAAQE,MAAR;AACC,SAAK,KAAL;AACC,UAAI;AACH,cAAMjB,OAAO,GAAG,EAAhB;AACA,cAAMH,IAAI,CAACI,IAAL,CAAU;AAAEC,UAAAA,GAAG,EAAEgB,KAAK,CAACnB;AAAb,SAAV,EAA6BI,IAA7B,CAAkC,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACvDA,UAAAA,KAAK,CAAC,CAAD,CAAL,CAASC,KAAT,CAAeC,OAAf,CAAwBC,GAAD,IAAS;AAC/BZ,YAAAA,KAAK,CACHK,IADF,CACO;AAAEQ,cAAAA,MAAM,EAAES,KAAK,CAACnB,EAAhB;AAAoBW,cAAAA,IAAI,EAAEF,GAAG,CAACG;AAA9B,aADP,EAEER,IAFF,CAEO,CAACC,GAAD,EAAMQ,MAAN,KAAiB;AACtBZ,cAAAA,OAAO,CAACa,IAAR,CAAa;AAAEF,gBAAAA,KAAK,EAAEH,GAAG,CAACG,KAAb;AAAoBG,gBAAAA,OAAO,EAAEF;AAA7B,eAAb;AACA,aAJF;AAKA,WAND;AAOAI,UAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBpB,OAArB;AACA,SATK,CAAN;AAUA,OAZD,CAYE,OAAOqB,KAAP,EAAc;AACfC,QAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBF,KAAnB;AACAL,QAAAA,GAAG,CAACG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAAEI,UAAAA,MAAM,EAAE;AAAV,SAArB;AACA;;AACD;;AAED;AACC;AArBF;AAuBA,CAzBD","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\nimport graph from \"../../../mongoose/models/graph\";\r\nimport form from \"../../../mongoose/models/form\";\r\ndbconnect();\r\n\r\nconst handlegraphshape = async (id) => {\r\n\tlet newdata = [];\r\n\r\n\tawait form.find({ _id: id }).exec((err, resul) => {\r\n\t\tresul[0].tools.forEach((obj) => {\r\n\t\t\tgraph.find({ formId: id, ques: obj.label }).exec((err, result) => {\r\n\t\t\t\treturn newdata.push({ label: obj.label, options: result });\r\n\t\t\t});\r\n\t\t});\r\n\t});\r\n\treturn newdata;\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst newdata = [];\r\n\t\t\t\tawait form.find({ _id: query.id }).exec((err, resul) => {\r\n\t\t\t\t\tresul[0].tools.forEach((obj) => {\r\n\t\t\t\t\t\tgraph\r\n\t\t\t\t\t\t\t.find({ formId: query.id, ques: obj.label })\r\n\t\t\t\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\t\t\t\tnewdata.push({ label: obj.label, options: result });\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t});\r\n\t\t\t\t\tres.status(200).json(newdata);\r\n\t\t\t\t});\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(\"err\", error);\r\n\t\t\t\tres.status(404).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}