{"ast":null,"code":"import dbconnect from \"../../../mongoose/mongoose\";\nimport graph from \"../../../mongoose/models/graph\";\ndbconnect();\n\nconst handleoldansewers = async (newGraphdata, id) => {\n  newGraphdata.forEach(ob => {\n    if (typeof ob.value !== \"string\") {\n      ob.value.forEach(key => {\n        const findGraph = graph.find({\n          formId: id,\n          optionId: key\n        }).exec((err, result) => {\n          console.log(err);\n          console.log(result);\n\n          if (result.optionId) {\n            const ans = graph.findOneAndUpdate({\n              _id: result._id\n            }, {\n              $inc: {\n                count: 1\n              }\n            }).exec();\n            console.log(\"ans11\", ans);\n          }\n        });\n      });\n    } else {\n      const findGrap = graph.find({\n        formId: id,\n        optionId: key\n      }).exec((err, result) => {\n        console.log(err);\n        console.log(result);\n\n        if (result.optionId) {\n          const ans = graph.findOneAndUpdate({\n            _id: result._id\n          }, {\n            $inc: {\n              count: 1\n            }\n          }).exec();\n          console.log(\"22ans\", ans);\n        }\n      });\n    }\n  });\n};\n\nexport default (async (req, res) => {\n  const {\n    method,\n    query\n  } = req;\n\n  switch (method) {\n    case \"GET\":\n      try {\n        const findGraph = await graph.findById(query.id);\n        res.json(findGraph);\n      } catch (error) {\n        res.status(400).json({\n          error\n        });\n        res.end();\n      }\n\n      break;\n\n    case \"POST\":\n      try {\n        const handledAns = await handleoldansewers(req.body, query.id);\n        res.json(handledAns);\n      } catch (error) {\n        console.log(error);\n        res.status(400).json({\n          sucees: false\n        });\n      }\n\n      break;\n\n    default:\n      break;\n  }\n});","map":{"version":3,"sources":["D:/upwork projects/New folder (4)/form-projet-finale/pages/api/submitform/[id].js"],"names":["dbconnect","graph","handleoldansewers","newGraphdata","id","forEach","ob","value","key","findGraph","find","formId","optionId","exec","err","result","console","log","ans","findOneAndUpdate","_id","$inc","count","findGrap","req","res","method","query","findById","json","error","status","end","handledAns","body","sucees"],"mappings":"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","sourcesContent":["import dbconnect from \"../../../mongoose/mongoose\";\r\n\r\nimport graph from \"../../../mongoose/models/graph\";\r\n\r\ndbconnect();\r\n\r\nconst handleoldansewers = async (newGraphdata, id) => {\r\n\tnewGraphdata.forEach((ob) => {\r\n\t\tif (typeof ob.value !== \"string\") {\r\n\t\t\tob.value.forEach((key) => {\r\n\t\t\t\tconst findGraph = graph\r\n\t\t\t\t\t.find({ formId: id, optionId: key })\r\n\t\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t\t\tif (result.optionId) {\r\n\t\t\t\t\t\t\tconst ans = graph\r\n\t\t\t\t\t\t\t\t.findOneAndUpdate({ _id: result._id }, { $inc: { count: 1 } })\r\n\t\t\t\t\t\t\t\t.exec();\r\n\t\t\t\t\t\t\tconsole.log(\"ans11\", ans);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tconst findGrap = graph\r\n\t\t\t\t.find({ formId: id, optionId: key })\r\n\t\t\t\t.exec((err, result) => {\r\n\t\t\t\t\tconsole.log(err);\r\n\t\t\t\t\tconsole.log(result);\r\n\t\t\t\t\tif (result.optionId) {\r\n\t\t\t\t\t\tconst ans = graph\r\n\t\t\t\t\t\t\t.findOneAndUpdate({ _id: result._id }, { $inc: { count: 1 } })\r\n\t\t\t\t\t\t\t.exec();\r\n\r\n\t\t\t\t\t\tconsole.log(\"22ans\", ans);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t}\r\n\t});\r\n};\r\n\r\nexport default async (req, res) => {\r\n\tconst { method, query } = req;\r\n\tswitch (method) {\r\n\t\tcase \"GET\":\r\n\t\t\ttry {\r\n\t\t\t\tconst findGraph = await graph.findById(query.id);\r\n\t\t\t\tres.json(findGraph);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tres.status(400).json({ error });\r\n\t\t\t\tres.end();\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\t\tcase \"POST\":\r\n\t\t\ttry {\r\n\t\t\t\tconst handledAns = await handleoldansewers(req.body, query.id);\r\n\t\t\t\tres.json(handledAns);\r\n\t\t\t} catch (error) {\r\n\t\t\t\tconsole.log(error);\r\n\t\t\t\tres.status(400).json({ sucees: false });\r\n\t\t\t}\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tbreak;\r\n\t}\r\n};\r\n"]},"metadata":{},"sourceType":"module"}